[
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "SystemTimeDetector",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimeFormatDetector",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_time",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_time_format",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_timezone",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "importPath": "claude_monitor.utils.time_utils",
        "description": "claude_monitor.utils.time_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "RenderableType",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "RenderableType",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "RenderableType",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "RenderableType",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "Console",
        "importPath": "rich.console",
        "description": "rich.console",
        "isExtraImport": true,
        "detail": "rich.console",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "claude_monitor",
        "description": "claude_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "claude_monitor",
        "description": "claude_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "claude_monitor",
        "description": "claude_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "claude_monitor",
        "description": "claude_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor",
        "documentation": {}
    },
    {
        "label": "ensure_directories",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "init_timezone",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_environment",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "ensure_directories",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "init_timezone",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_environment",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "importPath": "claude_monitor.cli.bootstrap",
        "description": "claude_monitor.cli.bootstrap",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "Plans",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PlanType",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOKEN_LIMIT",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Plans",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Plans",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PlanType",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOKEN_LIMIT",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Plans",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOKEN_LIMIT",
        "importPath": "claude_monitor.core.plans",
        "description": "claude_monitor.core.plans",
        "isExtraImport": true,
        "detail": "claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "claude_monitor.core.settings",
        "description": "claude_monitor.core.settings",
        "isExtraImport": true,
        "detail": "claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "claude_monitor.core.settings",
        "description": "claude_monitor.core.settings",
        "isExtraImport": true,
        "detail": "claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "LastUsedParams",
        "importPath": "claude_monitor.core.settings",
        "description": "claude_monitor.core.settings",
        "isExtraImport": true,
        "detail": "claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "importPath": "claude_monitor.core.settings",
        "description": "claude_monitor.core.settings",
        "isExtraImport": true,
        "detail": "claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "UsageAggregator",
        "importPath": "claude_monitor.data.aggregator",
        "description": "claude_monitor.data.aggregator",
        "isExtraImport": true,
        "detail": "claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "UsageAggregator",
        "importPath": "claude_monitor.data.aggregator",
        "description": "claude_monitor.data.aggregator",
        "isExtraImport": true,
        "detail": "claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "AggregatedPeriod",
        "importPath": "claude_monitor.data.aggregator",
        "description": "claude_monitor.data.aggregator",
        "isExtraImport": true,
        "detail": "claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "AggregatedStats",
        "importPath": "claude_monitor.data.aggregator",
        "description": "claude_monitor.data.aggregator",
        "isExtraImport": true,
        "detail": "claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "UsageAggregator",
        "importPath": "claude_monitor.data.aggregator",
        "description": "claude_monitor.data.aggregator",
        "isExtraImport": true,
        "detail": "claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_add_optional_block_data",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_convert_blocks_to_dict_format",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_create_base_block_dict",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_create_result",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_format_block_entries",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_format_limit_info",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_is_limit_in_block_timerange",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "_process_burn_rates",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "importPath": "claude_monitor.data.analysis",
        "description": "claude_monitor.data.analysis",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_file_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_file_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "ErrorLevel",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "importPath": "claude_monitor.error_handling",
        "description": "claude_monitor.error_handling",
        "isExtraImport": true,
        "detail": "claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "MonitoringOrchestrator",
        "importPath": "claude_monitor.monitoring.orchestrator",
        "description": "claude_monitor.monitoring.orchestrator",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "MonitoringOrchestrator",
        "importPath": "claude_monitor.monitoring.orchestrator",
        "description": "claude_monitor.monitoring.orchestrator",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "MonitoringOrchestrator",
        "importPath": "claude_monitor.monitoring.orchestrator",
        "description": "claude_monitor.monitoring.orchestrator",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "enter_alternate_screen",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_cleanup_and_exit",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_error_and_exit",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "restore_terminal",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "setup_terminal",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "enter_alternate_screen",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_cleanup_and_exit",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_error_and_exit",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "restore_terminal",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "setup_terminal",
        "importPath": "claude_monitor.terminal.manager",
        "description": "claude_monitor.terminal.manager",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "get_themed_console",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_cost_style",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_velocity_indicator",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_themed_console",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_cost_style",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_velocity_indicator",
        "importPath": "claude_monitor.terminal.themes",
        "description": "claude_monitor.terminal.themes",
        "isExtraImport": true,
        "detail": "claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "DisplayController",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "DisplayController",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "DisplayController",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "LiveDisplayManager",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "ScreenBufferManager",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "SessionCalculator",
        "importPath": "claude_monitor.ui.display_controller",
        "description": "claude_monitor.ui.display_controller",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "TableViewsController",
        "importPath": "claude_monitor.ui.table_views",
        "description": "claude_monitor.ui.table_views",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "TableViewsController",
        "importPath": "claude_monitor.ui.table_views",
        "description": "claude_monitor.ui.table_views",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "TableViewsController",
        "importPath": "claude_monitor.ui.table_views",
        "description": "claude_monitor.ui.table_views",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "importPath": "claude_monitor.core.models",
        "description": "claude_monitor.core.models",
        "isExtraImport": true,
        "detail": "claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "P90Calculator",
        "importPath": "claude_monitor.core.p90_calculator",
        "description": "claude_monitor.core.p90_calculator",
        "isExtraImport": true,
        "detail": "claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "P90Calculator",
        "importPath": "claude_monitor.core.p90_calculator",
        "description": "claude_monitor.core.p90_calculator",
        "isExtraImport": true,
        "detail": "claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "lru_cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "quantiles",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "quantiles",
        "importPath": "statistics",
        "description": "statistics",
        "isExtraImport": true,
        "detail": "statistics",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "BaseTzInfo",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "BaseTzInfo",
        "importPath": "pytz",
        "description": "pytz",
        "isExtraImport": true,
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "BurnRateCalculator",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "calculate_hourly_burn_rate",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "BurnRateCalculator",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "calculate_hourly_burn_rate",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "BurnRateCalculator",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "_calculate_total_tokens_in_hour",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "_process_block_for_burn_rate",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "calculate_hourly_burn_rate",
        "importPath": "claude_monitor.core.calculations",
        "description": "claude_monitor.core.calculations",
        "isExtraImport": true,
        "detail": "claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "SessionAnalyzer",
        "importPath": "claude_monitor.data.analyzer",
        "description": "claude_monitor.data.analyzer",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "SessionAnalyzer",
        "importPath": "claude_monitor.data.analyzer",
        "description": "claude_monitor.data.analyzer",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "SessionAnalyzer",
        "importPath": "claude_monitor.data.analyzer",
        "description": "claude_monitor.data.analyzer",
        "isExtraImport": true,
        "detail": "claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "load_usage_entries",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_usage_entries",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_create_unique_hash",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_find_jsonl_files",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_map_to_usage_entry",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_process_single_file",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_should_process_entry",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "_update_processed_hashes",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_all_raw_entries",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_usage_entries",
        "importPath": "claude_monitor.data.reader",
        "description": "claude_monitor.data.reader",
        "isExtraImport": true,
        "detail": "claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "DataConverter",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TimestampProcessor",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TokenExtractor",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "DataConverter",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TimestampProcessor",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TokenExtractor",
        "importPath": "claude_monitor.core.data_processors",
        "description": "claude_monitor.core.data_processors",
        "isExtraImport": true,
        "detail": "claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "importPath": "claude_monitor.core.pricing",
        "description": "claude_monitor.core.pricing",
        "isExtraImport": true,
        "detail": "claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "importPath": "claude_monitor.core.pricing",
        "description": "claude_monitor.core.pricing",
        "isExtraImport": true,
        "detail": "claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "importPath": "claude_monitor.core.pricing",
        "description": "claude_monitor.core.pricing",
        "isExtraImport": true,
        "detail": "claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "importPath": "claude_monitor.core.pricing",
        "description": "claude_monitor.core.pricing",
        "isExtraImport": true,
        "detail": "claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "DataManager",
        "importPath": "claude_monitor.monitoring.data_manager",
        "description": "claude_monitor.monitoring.data_manager",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "DataManager",
        "importPath": "claude_monitor.monitoring.data_manager",
        "description": "claude_monitor.monitoring.data_manager",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "SessionMonitor",
        "importPath": "claude_monitor.monitoring.session_monitor",
        "description": "claude_monitor.monitoring.session_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "SessionMonitor",
        "importPath": "claude_monitor.monitoring.session_monitor",
        "description": "claude_monitor.monitoring.session_monitor",
        "isExtraImport": true,
        "detail": "claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "Theme",
        "importPath": "rich.theme",
        "description": "rich.theme",
        "isExtraImport": true,
        "detail": "rich.theme",
        "documentation": {}
    },
    {
        "label": "Theme",
        "importPath": "rich.theme",
        "description": "rich.theme",
        "isExtraImport": true,
        "detail": "rich.theme",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ScreenManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ScreenManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "importPath": "claude_monitor.ui.layouts",
        "description": "claude_monitor.ui.layouts",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Live",
        "importPath": "rich.live",
        "description": "rich.live",
        "isExtraImport": true,
        "detail": "rich.live",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "rich.text",
        "description": "rich.text",
        "isExtraImport": true,
        "detail": "rich.text",
        "documentation": {}
    },
    {
        "label": "AdvancedCustomLimitDisplay",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "ErrorDisplayComponent",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "LoadingScreenComponent",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "CostIndicator",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "VelocityIndicator",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "AdvancedCustomLimitDisplay",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "ErrorDisplayComponent",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "LoadingScreenComponent",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "CostIndicator",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "VelocityIndicator",
        "importPath": "claude_monitor.ui.components",
        "description": "claude_monitor.ui.components",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "SessionDisplayComponent",
        "importPath": "claude_monitor.ui.session_display",
        "description": "claude_monitor.ui.session_display",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "SessionDisplayComponent",
        "importPath": "claude_monitor.ui.session_display",
        "description": "claude_monitor.ui.session_display",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "NotificationManager",
        "importPath": "claude_monitor.utils.notifications",
        "description": "claude_monitor.utils.notifications",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.notifications",
        "documentation": {}
    },
    {
        "label": "NotificationManager",
        "importPath": "claude_monitor.utils.notifications",
        "description": "claude_monitor.utils.notifications",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.notifications",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ModelUsageBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TimeProgressBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TokenProgressBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ModelUsageBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TimeProgressBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TokenProgressBar",
        "importPath": "claude_monitor.ui.progress_bars",
        "description": "claude_monitor.ui.progress_bars",
        "isExtraImport": true,
        "detail": "claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "rich.align",
        "description": "rich.align",
        "isExtraImport": true,
        "detail": "rich.align",
        "documentation": {}
    },
    {
        "label": "Align",
        "importPath": "rich.align",
        "description": "rich.align",
        "isExtraImport": true,
        "detail": "rich.align",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Panel",
        "importPath": "rich.panel",
        "description": "rich.panel",
        "isExtraImport": true,
        "detail": "rich.panel",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "rich.table",
        "description": "rich.table",
        "isExtraImport": true,
        "detail": "rich.table",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_number",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_number",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_time",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_time",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "importPath": "claude_monitor.utils.formatting",
        "description": "claude_monitor.utils.formatting",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "importlib.metadata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib.metadata",
        "description": "importlib.metadata",
        "detail": "importlib.metadata",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "mock_open",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "claude_monitor.cli.main",
        "description": "claude_monitor.cli.main",
        "isExtraImport": true,
        "detail": "claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "get_model_display_name",
        "importPath": "claude_monitor.utils.model_utils",
        "description": "claude_monitor.utils.model_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "get_model_generation",
        "importPath": "claude_monitor.utils.model_utils",
        "description": "claude_monitor.utils.model_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "is_claude_model",
        "importPath": "claude_monitor.utils.model_utils",
        "description": "claude_monitor.utils.model_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "importPath": "claude_monitor.utils.model_utils",
        "description": "claude_monitor.utils.model_utils",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "importPath": "claude_monitor.utils.timezone",
        "description": "claude_monitor.utils.timezone",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "_detect_timezone_time_preference",
        "importPath": "claude_monitor.utils.timezone",
        "description": "claude_monitor.utils.timezone",
        "isExtraImport": true,
        "detail": "claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "_get_version_from_pyproject",
        "importPath": "claude_monitor._version",
        "description": "claude_monitor._version",
        "isExtraImport": true,
        "detail": "claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "get_version",
        "importPath": "claude_monitor._version",
        "description": "claude_monitor._version",
        "isExtraImport": true,
        "detail": "claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "peekOfCode": "def setup_logging(\n    level: str = \"INFO\", log_file: Optional[Path] = None, disable_console: bool = False\n) -> None:\n    \"\"\"Configure logging for the application.\n    Args:\n        level: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n        log_file: Optional file path for logging\n        disable_console: If True, disable console logging (useful for monitor mode)\n    \"\"\"\n    log_level = getattr(logging, level.upper(), logging.INFO)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_environment",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "peekOfCode": "def setup_environment() -> None:\n    \"\"\"Initialize environment variables and system settings.\"\"\"\n    if sys.stdout.encoding != \"utf-8\":\n        if hasattr(sys.stdout, \"reconfigure\"):\n            sys.stdout.reconfigure(encoding=\"utf-8\")  # type: ignore[attr-defined]\n    os.environ.setdefault(\n        \"CLAUDE_MONITOR_CONFIG\", str(Path.home() / \".claude-monitor\" / \"config.yaml\")\n    )\n    os.environ.setdefault(\n        \"CLAUDE_MONITOR_CACHE_DIR\", str(Path.home() / \".claude-monitor\" / \"cache\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "init_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "peekOfCode": "def init_timezone(timezone: str = \"Europe/Warsaw\") -> TimezoneHandler:\n    \"\"\"Initialize timezone handler.\n    Args:\n        timezone: Timezone string (e.g. \"Europe/Warsaw\", \"UTC\")\n    Returns:\n        Configured TimezoneHandler instance\n    \"\"\"\n    tz_handler = TimezoneHandler()\n    if timezone != \"Europe/Warsaw\":\n        tz_handler.set_timezone(timezone)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "ensure_directories",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "peekOfCode": "def ensure_directories() -> None:\n    \"\"\"Ensure required directories exist.\"\"\"\n    dirs = [\n        Path.home() / \".claude-monitor\",\n        Path.home() / \".claude-monitor\" / \"cache\",\n        Path.home() / \".claude-monitor\" / \"logs\",\n        Path.home() / \".claude-monitor\" / \"reports\",\n    ]\n    for directory in dirs:\n        directory.mkdir(parents=True, exist_ok=True)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "get_standard_claude_paths",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "def get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories\n    \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "discover_claude_data_paths",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "def discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories\n    \"\"\"\n    paths_to_check: List[str] = (\n        [str(p) for p in custom_paths] if custom_paths else get_standard_claude_paths()\n    )",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "def main(argv: Optional[List[str]] = None) -> int:\n    \"\"\"Main entry point with direct pydantic-settings integration.\"\"\"\n    if argv is None:\n        argv = sys.argv[1:]\n    if \"--version\" in argv or \"-v\" in argv:\n        print(f\"claude-monitor {__version__}\")\n        return 0\n    try:\n        settings = Settings.load_with_last_used(argv)\n        setup_environment()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "handle_application_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "def handle_application_error(\n    exception: Exception,\n    component: str = \"cli_main\",\n    exit_code: int = 1,\n) -> NoReturn:\n    \"\"\"Handle application-level errors with proper logging and exit.\n    Args:\n        exception: The exception that occurred\n        component: Component where the error occurred\n        exit_code: Exit code to use when terminating",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "validate_cli_environment",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "def validate_cli_environment() -> Optional[str]:\n    \"\"\"Validate the CLI environment and return error message if invalid.\n    Returns:\n        Error message if validation fails, None if successful\n    \"\"\"\n    try:\n        # Check Python version compatibility\n        if sys.version_info < (3, 8):\n            return f\"Python 3.8+ required, found {sys.version_info.major}.{sys.version_info.minor}\"\n        # Check for required dependencies",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "DataUpdateCallback",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "DataUpdateCallback = Callable[[Dict[str, Any]], None]\nSessionChangeCallback = Callable[[str, str, Optional[Dict[str, Any]]], None]\ndef get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "SessionChangeCallback",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "peekOfCode": "SessionChangeCallback = Callable[[str, str, Optional[Dict[str, Any]]], None]\ndef get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "BlockLike",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "peekOfCode": "class BlockLike(Protocol):\n    \"\"\"Protocol for objects that behave like session blocks.\"\"\"\n    is_active: bool\n    duration_minutes: float\n    token_counts: TokenCounts\n    cost_usd: float\n    end_time: datetime\nclass BurnRateCalculator:\n    \"\"\"Calculates burn rates and usage projections for session blocks.\"\"\"\n    def calculate_burn_rate(self, block: BlockLike) -> Optional[BurnRate]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "BurnRateCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "peekOfCode": "class BurnRateCalculator:\n    \"\"\"Calculates burn rates and usage projections for session blocks.\"\"\"\n    def calculate_burn_rate(self, block: BlockLike) -> Optional[BurnRate]:\n        \"\"\"Calculate current consumption rate for active blocks.\"\"\"\n        if not block.is_active or block.duration_minutes < 1:\n            return None\n        total_tokens = (\n            block.token_counts.input_tokens\n            + block.token_counts.output_tokens\n            + block.token_counts.cache_creation_tokens",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "calculate_hourly_burn_rate",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "peekOfCode": "def calculate_hourly_burn_rate(\n    blocks: List[Dict[str, Any]], current_time: datetime\n) -> float:\n    \"\"\"Calculate burn rate based on all sessions in the last hour.\"\"\"\n    if not blocks:\n        return 0.0\n    one_hour_ago = current_time - timedelta(hours=1)\n    total_tokens = _calculate_total_tokens_in_hour(blocks, one_hour_ago, current_time)\n    return total_tokens / 60.0 if total_tokens > 0 else 0.0\ndef _calculate_total_tokens_in_hour(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "TimestampProcessor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "peekOfCode": "class TimestampProcessor:\n    \"\"\"Unified timestamp parsing and processing utilities.\"\"\"\n    def __init__(self, timezone_handler: Optional[TimezoneHandler] = None) -> None:\n        \"\"\"Initialize with optional timezone handler.\"\"\"\n        self.timezone_handler: TimezoneHandler = timezone_handler or TimezoneHandler()\n    def parse_timestamp(\n        self, timestamp_value: Union[str, int, float, datetime, None]\n    ) -> Optional[datetime]:\n        \"\"\"Parse timestamp from various formats to UTC datetime.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TokenExtractor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "peekOfCode": "class TokenExtractor:\n    \"\"\"Unified token extraction utilities.\"\"\"\n    @staticmethod\n    def extract_tokens(data: Dict[str, Any]) -> Dict[str, int]:\n        \"\"\"Extract token counts from data in standardized format.\n        Args:\n            data: Data dictionary with token information\n        Returns:\n            Dictionary with standardized token keys and counts\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "DataConverter",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "peekOfCode": "class DataConverter:\n    \"\"\"Unified data conversion utilities.\"\"\"\n    @staticmethod\n    def flatten_nested_dict(data: Dict[str, Any], prefix: str = \"\") -> Dict[str, Any]:\n        \"\"\"Flatten nested dictionary structure.\n        Args:\n            data: Nested dictionary\n            prefix: Prefix for flattened keys\n        Returns:\n            Flattened dictionary",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class CostMode(Enum):\n    \"\"\"Cost calculation modes for token usage analysis.\"\"\"\n    AUTO = \"auto\"\n    CACHED = \"cached\"\n    CALCULATED = \"calculate\"\n@dataclass\nclass UsageEntry:\n    \"\"\"Individual usage record from Claude usage data.\"\"\"\n    timestamp: datetime\n    input_tokens: int",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class UsageEntry:\n    \"\"\"Individual usage record from Claude usage data.\"\"\"\n    timestamp: datetime\n    input_tokens: int\n    output_tokens: int\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost_usd: float = 0.0\n    model: str = \"\"\n    message_id: str = \"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class TokenCounts:\n    \"\"\"Token aggregation structure with computed totals.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    @property\n    def total_tokens(self) -> int:\n        \"\"\"Get total tokens across all types.\"\"\"\n        return (",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class BurnRate:\n    \"\"\"Token consumption rate metrics.\"\"\"\n    tokens_per_minute: float\n    cost_per_hour: float\n@dataclass\nclass UsageProjection:\n    \"\"\"Usage projection calculations for active blocks.\"\"\"\n    projected_total_tokens: int\n    projected_total_cost: float\n    remaining_minutes: float",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class UsageProjection:\n    \"\"\"Usage projection calculations for active blocks.\"\"\"\n    projected_total_tokens: int\n    projected_total_cost: float\n    remaining_minutes: float\n@dataclass\nclass SessionBlock:\n    \"\"\"Aggregated session block representing a 5-hour period.\"\"\"\n    id: str\n    start_time: datetime",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "class SessionBlock:\n    \"\"\"Aggregated session block representing a 5-hour period.\"\"\"\n    id: str\n    start_time: datetime\n    end_time: datetime\n    entries: List[UsageEntry] = field(default_factory=list)\n    token_counts: TokenCounts = field(default_factory=TokenCounts)\n    is_active: bool = False\n    is_gap: bool = False\n    burn_rate: Optional[BurnRate] = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "peekOfCode": "def normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name for consistent usage across the application.\n    Handles various model name formats and maps them to standard keys.\n    (Moved from utils/model_utils.py)\n    Args:\n        model: Raw model name from usage data\n    Returns:\n        Normalized model key\n    Examples:\n        >>> normalize_model_name(\"claude-3-opus-20240229\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "P90Config",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "peekOfCode": "class P90Config:\n    common_limits: Sequence[int]\n    limit_threshold: float\n    default_min_limit: int\n    cache_ttl_seconds: int\ndef _did_hit_limit(tokens: int, common_limits: Sequence[int], threshold: float) -> bool:\n    return any(tokens >= limit * threshold for limit in common_limits)\ndef _extract_sessions(\n    blocks: Sequence[Dict[str, Any]], filter_fn: Callable[[Dict[str, Any]], bool]\n) -> List[int]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "P90Calculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "peekOfCode": "class P90Calculator:\n    def __init__(self, config: Optional[P90Config] = None) -> None:\n        if config is None:\n            from claude_monitor.core.plans import (\n                COMMON_TOKEN_LIMITS,\n                DEFAULT_TOKEN_LIMIT,\n                LIMIT_DETECTION_THRESHOLD,\n            )\n            config = P90Config(\n                common_limits=COMMON_TOKEN_LIMITS,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "PlanType",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "peekOfCode": "class PlanType(Enum):\n    \"\"\"Available Claude subscription plan types.\"\"\"\n    PRO = \"pro\"\n    MAX5 = \"max5\"\n    MAX20 = \"max20\"\n    CUSTOM = \"custom\"\n    @classmethod\n    def from_string(cls, value: str) -> \"PlanType\":\n        \"\"\"Case-insensitive creation of PlanType from a string.\"\"\"\n        try:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PlanConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "peekOfCode": "class PlanConfig:\n    \"\"\"Immutable configuration for a Claude subscription plan.\"\"\"\n    name: str\n    token_limit: int\n    cost_limit: float\n    message_limit: int\n    display_name: str\n    @property\n    def formatted_token_limit(self) -> str:\n        \"\"\"Human-readable token limit (e.g., '19k' instead of '19000').\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Plans",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "peekOfCode": "class Plans:\n    \"\"\"Registry and shared constants for all plan configurations.\"\"\"\n    DEFAULT_TOKEN_LIMIT: int = _DEFAULTS[\"token_limit\"]\n    DEFAULT_COST_LIMIT: float = _DEFAULTS[\"cost_limit\"]\n    DEFAULT_MESSAGE_LIMIT: int = _DEFAULTS[\"message_limit\"]\n    COMMON_TOKEN_LIMITS: List[int] = [19_000, 88_000, 220_000, 880_000]\n    LIMIT_DETECTION_THRESHOLD: float = 0.95\n    @classmethod\n    def _build_config(cls, plan_type: PlanType) -> PlanConfig:\n        \"\"\"Instantiate PlanConfig from the PLAN_LIMITS dictionary.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "peekOfCode": "def get_token_limit(plan: str, blocks: Optional[List[Dict[str, Any]]] = None) -> int:\n    \"\"\"Get token limit for a plan, using P90 for custom plans.\n    Args:\n        plan: Plan type ('pro', 'max5', 'max20', 'custom')\n        blocks: Optional session blocks for custom P90 calculation\n    Returns:\n        Token limit for the plan\n    \"\"\"\n    return Plans.get_token_limit(plan, blocks)\ndef get_cost_limit(plan: str) -> float:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_cost_limit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "peekOfCode": "def get_cost_limit(plan: str) -> float:\n    \"\"\"Get standard cost limit for a plan.\n    Args:\n        plan: Plan type ('pro', 'max5', 'max20', 'custom')\n    Returns:\n        Cost limit for the plan in USD\n    \"\"\"\n    return Plans.get_cost_limit(plan)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.pricing",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.pricing",
        "peekOfCode": "class PricingCalculator:\n    \"\"\"Calculates costs based on model pricing with caching support.\n    This class provides methods for calculating costs for individual models/tokens\n    as well as detailed cost breakdowns for collections of usage entries.\n    It supports custom pricing configurations and caches calculations for performance.\n    Features:\n    - Configurable pricing (from config or custom)\n    - Fallback hardcoded pricing for robustness\n    - Caching for performance\n    - Support for all token types including cache",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "LastUsedParams",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "peekOfCode": "class LastUsedParams:\n    \"\"\"Manages last used parameters persistence (moved from last_used.py).\"\"\"\n    def __init__(self, config_dir: Optional[Path] = None) -> None:\n        \"\"\"Initialize with config directory.\"\"\"\n        self.config_dir = config_dir or Path.home() / \".claude-monitor\"\n        self.params_file = self.config_dir / \"last_used.json\"\n    def save(self, settings: \"Settings\") -> None:\n        \"\"\"Save current settings as last used.\"\"\"\n        try:\n            params = {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"claude-monitor - Real-time token usage monitoring for Claude AI\"\"\"\n    model_config = SettingsConfigDict(\n        env_file=None,\n        env_prefix=\"\",\n        case_sensitive=False,\n        validate_default=True,\n        extra=\"ignore\",\n        cli_parse_args=True,\n        cli_prog_name=\"claude-monitor\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LastUsedParams:\n    \"\"\"Manages last used parameters persistence (moved from last_used.py).\"\"\"\n    def __init__(self, config_dir: Optional[Path] = None) -> None:\n        \"\"\"Initialize with config directory.\"\"\"\n        self.config_dir = config_dir or Path.home() / \".claude-monitor\"\n        self.params_file = self.config_dir / \"last_used.json\"\n    def save(self, settings: \"Settings\") -> None:\n        \"\"\"Save current settings as last used.\"\"\"\n        try:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "AggregatedStats",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "peekOfCode": "class AggregatedStats:\n    \"\"\"Statistics for aggregated usage data.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost: float = 0.0\n    count: int = 0\n    def add_entry(self, entry: UsageEntry) -> None:\n        \"\"\"Add an entry's statistics to this aggregate.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "AggregatedPeriod",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "peekOfCode": "class AggregatedPeriod:\n    \"\"\"Aggregated data for a time period (day or month).\"\"\"\n    period_key: str\n    stats: AggregatedStats = field(default_factory=AggregatedStats)\n    models_used: set = field(default_factory=set)\n    model_breakdowns: Dict[str, AggregatedStats] = field(\n        default_factory=lambda: defaultdict(AggregatedStats)\n    )\n    def add_entry(self, entry: UsageEntry) -> None:\n        \"\"\"Add an entry to this period's aggregate.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "UsageAggregator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "peekOfCode": "class UsageAggregator:\n    \"\"\"Aggregates usage data for daily and monthly reports.\"\"\"\n    def __init__(\n        self, data_path: str, aggregation_mode: str = \"daily\", timezone: str = \"UTC\"\n    ):\n        \"\"\"Initialize the aggregator.\n        Args:\n            data_path: Path to the data directory\n            aggregation_mode: Mode of aggregation ('daily' or 'monthly')\n            timezone: Timezone string for date formatting",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass AggregatedStats:\n    \"\"\"Statistics for aggregated usage data.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost: float = 0.0\n    count: int = 0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "peekOfCode": "def analyze_usage(\n    hours_back: Optional[int] = 96,\n    use_cache: bool = True,\n    quick_start: bool = False,\n    data_path: Optional[str] = None,\n) -> Dict[str, Any]:\n    \"\"\"\n    Main entry point to generate response_final.json.\n    Algorithm redesigned to:\n    1. First divide all outputs into blocks",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef analyze_usage(\n    hours_back: Optional[int] = 96,\n    use_cache: bool = True,\n    quick_start: bool = False,\n    data_path: Optional[str] = None,\n) -> Dict[str, Any]:\n    \"\"\"\n    Main entry point to generate response_final.json.\n    Algorithm redesigned to:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "SessionAnalyzer",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "peekOfCode": "class SessionAnalyzer:\n    \"\"\"Creates session blocks and detects limits.\"\"\"\n    def __init__(self, session_duration_hours: int = 5):\n        \"\"\"Initialize analyzer with session duration.\n        Args:\n            session_duration_hours: Duration of each session block in hours\n        \"\"\"\n        self.session_duration_hours = session_duration_hours\n        self.session_duration = timedelta(hours=session_duration_hours)\n        self.timezone_handler = TimezoneHandler()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionAnalyzer:\n    \"\"\"Creates session blocks and detects limits.\"\"\"\n    def __init__(self, session_duration_hours: int = 5):\n        \"\"\"Initialize analyzer with session duration.\n        Args:\n            session_duration_hours: Duration of each session block in hours\n        \"\"\"\n        self.session_duration_hours = session_duration_hours\n        self.session_duration = timedelta(hours=session_duration_hours)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "UsageEntryMapper",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "class UsageEntryMapper:\n    \"\"\"Compatibility wrapper for legacy UsageEntryMapper interface.\n    This class provides backward compatibility for tests that expect\n    the old UsageEntryMapper interface, wrapping the new functional\n    approach in _map_to_usage_entry.\n    \"\"\"\n    def __init__(\n        self, pricing_calculator: PricingCalculator, timezone_handler: TimezoneHandler\n    ):\n        \"\"\"Initialize with required components.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_usage_entries",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "def load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:\n        data_path: Path to Claude data directory (defaults to ~/.claude/projects)\n        hours_back: Only include entries from last N hours",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_all_raw_entries",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "def load_all_raw_entries(data_path: Optional[str] = None) -> List[Dict[str, Any]]:\n    \"\"\"Load all raw JSONL entries without processing.\n    Args:\n        data_path: Path to Claude data directory\n    Returns:\n        List of raw JSON dictionaries\n    \"\"\"\n    data_path = Path(data_path if data_path else \"~/.claude/projects\").expanduser()\n    jsonl_files = _find_jsonl_files(data_path)\n    all_raw_entries: List[Dict[str, Any]] = []",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "FIELD_COST_USD",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "FIELD_COST_USD = \"cost_usd\"\nFIELD_MODEL = \"model\"\nTOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "FIELD_MODEL",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "FIELD_MODEL = \"model\"\nTOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "TOKEN_INPUT",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "TOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "TOKEN_OUTPUT",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "TOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:\n        data_path: Path to Claude data directory (defaults to ~/.claude/projects)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "DataManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "peekOfCode": "class DataManager:\n    \"\"\"Manages data fetching and caching for monitoring.\"\"\"\n    def __init__(\n        self,\n        cache_ttl: int = 30,\n        hours_back: int = 192,\n        data_path: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize data manager with cache and fetch settings.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DataManager:\n    \"\"\"Manages data fetching and caching for monitoring.\"\"\"\n    def __init__(\n        self,\n        cache_ttl: int = 30,\n        hours_back: int = 192,\n        data_path: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize data manager with cache and fetch settings.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "MonitoringOrchestrator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "peekOfCode": "class MonitoringOrchestrator:\n    \"\"\"Orchestrates monitoring components following SRP.\"\"\"\n    def __init__(\n        self, update_interval: int = 10, data_path: Optional[str] = None\n    ) -> None:\n        \"\"\"Initialize orchestrator with components.\n        Args:\n            update_interval: Seconds between updates\n            data_path: Optional path to Claude data directory\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MonitoringOrchestrator:\n    \"\"\"Orchestrates monitoring components following SRP.\"\"\"\n    def __init__(\n        self, update_interval: int = 10, data_path: Optional[str] = None\n    ) -> None:\n        \"\"\"Initialize orchestrator with components.\n        Args:\n            update_interval: Seconds between updates\n            data_path: Optional path to Claude data directory",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "SessionMonitor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "peekOfCode": "class SessionMonitor:\n    \"\"\"Monitors sessions with tracking and validation.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session monitor.\"\"\"\n        self._current_session_id: Optional[str] = None\n        self._session_callbacks: List[\n            Callable[[str, str, Optional[Dict[str, Any]]], None]\n        ] = []\n        self._session_history: List[Dict[str, Any]] = []\n    def update(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionMonitor:\n    \"\"\"Monitors sessions with tracking and validation.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session monitor.\"\"\"\n        self._current_session_id: Optional[str] = None\n        self._session_callbacks: List[\n            Callable[[str, str, Optional[Dict[str, Any]]], None]\n        ] = []\n        self._session_history: List[Dict[str, Any]] = []",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "setup_terminal",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "peekOfCode": "def setup_terminal() -> Optional[List[Any]]:\n    \"\"\"Setup terminal for raw mode to prevent input interference.\n    Returns:\n        Terminal settings list that can be used to restore terminal state,\n        or None if terminal setup is not supported or fails.\n    \"\"\"\n    if not HAS_TERMIOS or not sys.stdin.isatty():\n        return None\n    try:\n        old_settings: List[Any] = termios.tcgetattr(sys.stdin)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "restore_terminal",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "peekOfCode": "def restore_terminal(old_settings: Optional[List[Any]]) -> None:\n    \"\"\"Restore terminal to original settings.\n    Args:\n        old_settings: Terminal settings to restore, or None if no settings to restore.\n    \"\"\"\n    # Send ANSI escape sequences to show cursor and exit alternate screen\n    print(\"\\033[?25h\\033[?1049l\", end=\"\", flush=True)\n    if old_settings and HAS_TERMIOS and sys.stdin.isatty():\n        try:\n            termios.tcsetattr(sys.stdin, termios.TCSANOW, old_settings)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "enter_alternate_screen",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "peekOfCode": "def enter_alternate_screen() -> None:\n    \"\"\"Enter alternate screen buffer, clear and hide cursor.\n    Sends ANSI escape sequences to:\n    - Enter alternate screen buffer (\\033[?1049h)\n    - Clear screen (\\033[2J)\n    - Move cursor to home position (\\033[H)\n    - Hide cursor (\\033[?25l)\n    \"\"\"\n    print(\"\\033[?1049h\\033[2J\\033[H\\033[?25l\", end=\"\", flush=True)\ndef handle_cleanup_and_exit(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_cleanup_and_exit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "peekOfCode": "def handle_cleanup_and_exit(\n    old_terminal_settings: Optional[List[Any]], message: str = \"Monitoring stopped.\"\n) -> None:\n    \"\"\"Handle cleanup and exit gracefully.\n    Args:\n        old_terminal_settings: Terminal settings to restore before exit.\n        message: Exit message to display to user.\n    \"\"\"\n    restore_terminal(old_terminal_settings)\n    print_themed(f\"\\n\\n{message}\", style=\"info\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_error_and_exit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "peekOfCode": "def handle_error_and_exit(\n    old_terminal_settings: Optional[List[Any]], error: Union[Exception, str]\n) -> None:\n    \"\"\"Handle error cleanup and exit.\n    Args:\n        old_terminal_settings: Terminal settings to restore before exit.\n        error: Exception or error message that caused the exit.\n    Raises:\n        The original error after cleanup and reporting.\n    \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "BackgroundType",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "class BackgroundType(Enum):\n    \"\"\"Background detection types.\"\"\"\n    LIGHT = \"light\"\n    DARK = \"dark\"\n    UNKNOWN = \"unknown\"\n@dataclass\nclass ThemeConfig:\n    \"\"\"Theme configuration for terminal display.\n    Attributes:\n        name: Human-readable theme name.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "ThemeConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "class ThemeConfig:\n    \"\"\"Theme configuration for terminal display.\n    Attributes:\n        name: Human-readable theme name.\n        colors: Mapping of color keys to ANSI/hex color values.\n        symbols: Unicode symbols and ASCII fallbacks for theme.\n        rich_theme: Rich library theme configuration.\n    \"\"\"\n    name: str\n    colors: Dict[str, str]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "AdaptiveColorScheme",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "class AdaptiveColorScheme:\n    \"\"\"Scientifically-based adaptive color schemes with proper contrast ratios.\n    IMPORTANT: This only changes FONT/FOREGROUND colors, never background colors.\n    The terminal's background remains unchanged - we adapt text colors for readability.\n    All color choices follow WCAG AA accessibility standards for contrast ratios.\n    \"\"\"\n    @staticmethod\n    def get_light_background_theme() -> Theme:\n        \"\"\"Font colors optimized for light terminal backgrounds (WCAG AA+ contrast).\"\"\"\n        return Theme(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "BackgroundDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "class BackgroundDetector:\n    \"\"\"Detects terminal background type using multiple methods.\n    Uses environment variables, OSC queries, and heuristics to determine\n    whether the terminal has a light or dark background for optimal theming.\n    \"\"\"\n    @staticmethod\n    def detect_background() -> BackgroundType:\n        \"\"\"Detect terminal background using multiple methods.\n        Tries multiple detection methods in order of reliability:\n        1. COLORFGBG environment variable",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "ThemeManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "class ThemeManager:\n    \"\"\"Manages themes with auto-detection and thread safety.\"\"\"\n    def __init__(self):\n        self._lock = threading.Lock()\n        self._current_theme: Optional[ThemeConfig] = None\n        self._forced_theme: Optional[str] = None\n        self.themes = self._load_themes()\n    def _load_themes(self) -> Dict[str, ThemeConfig]:\n        \"\"\"Load all available themes.\n        Creates theme configurations for light, dark, and classic themes",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_cost_style",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "def get_cost_style(cost: float) -> str:\n    \"\"\"Get appropriate style for a cost value.\n    Args:\n        cost: Cost value in USD to categorize.\n    Returns:\n        Rich style name for the cost category.\n    \"\"\"\n    for threshold, style in COST_THRESHOLDS:\n        if cost >= threshold:\n            return style",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_velocity_indicator",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "def get_velocity_indicator(burn_rate: float) -> Dict[str, str]:\n    \"\"\"Get velocity indicator based on burn rate.\n    Args:\n        burn_rate: Token consumption rate (tokens per minute).\n    Returns:\n        Dictionary with 'emoji' and 'label' keys for the velocity category.\n    \"\"\"\n    for indicator in VELOCITY_INDICATORS.values():\n        threshold_value = indicator[\"threshold\"]\n        if isinstance(threshold_value, (int, float)) and burn_rate < threshold_value:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_theme",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "def get_theme(name: Optional[str] = None) -> Theme:\n    \"\"\"Get Rich theme by name or auto-detect.\n    Args:\n        name: Theme name ('light', 'dark', 'classic') or None for auto-detection\n    Returns:\n        Rich Theme object\n    \"\"\"\n    theme_config = _theme_manager.get_theme(name)\n    return theme_config.rich_theme\ndef get_themed_console(force_theme: Optional[Union[str, bool]] = None) -> Console:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_themed_console",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "def get_themed_console(force_theme: Optional[Union[str, bool]] = None) -> Console:\n    \"\"\"Get themed console - backward compatibility wrapper.\n    Args:\n        force_theme: Theme name to force, or None for auto-detection.\n    Returns:\n        Rich Console instance with appropriate theme.\n    \"\"\"\n    if force_theme and isinstance(force_theme, str):\n        return _theme_manager.get_console(force_theme)\n    return _theme_manager.get_console(None)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "peekOfCode": "def print_themed(text: str, style: str = \"info\") -> None:\n    \"\"\"Print text with themed styling - backward compatibility.\n    Args:\n        text: Text to print with styling.\n        style: Rich style name to apply.\n    \"\"\"\n    console: Console = _theme_manager.get_console()\n    console.print(f\"[{style}]{text}[/]\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "VelocityIndicator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "class VelocityIndicator:\n    \"\"\"Velocity indicator component for burn rate visualization.\"\"\"\n    @staticmethod\n    def get_velocity_emoji(burn_rate: float) -> str:\n        \"\"\"Get velocity emoji based on burn rate.\n        Args:\n            burn_rate: Token burn rate per minute\n        Returns:\n            Emoji representing velocity level\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "CostIndicator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "class CostIndicator:\n    \"\"\"Cost indicator component for cost visualization.\"\"\"\n    @staticmethod\n    def render(cost: float, currency: str = \"USD\") -> str:\n        \"\"\"Render cost indicator with appropriate styling.\n        Args:\n            cost: Cost amount\n            currency: Currency symbol/code\n        Returns:\n            Formatted cost indicator",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "ErrorDisplayComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "class ErrorDisplayComponent:\n    \"\"\"Error display component for handling error states.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize error display component.\"\"\"\n    def format_error_screen(\n        self, plan: str = \"pro\", timezone: str = \"Europe/Warsaw\"\n    ) -> List[str]:\n        \"\"\"Format error screen for failed data fetch.\n        Args:\n            plan: Current plan name",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "LoadingScreenComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "class LoadingScreenComponent:\n    \"\"\"Loading screen component for displaying loading states.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize loading screen component.\"\"\"\n    def create_loading_screen(\n        self,\n        plan: str = \"pro\",\n        timezone: str = \"Europe/Warsaw\",\n        custom_message: Optional[str] = None,\n    ) -> List[str]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "AdvancedCustomLimitDisplay",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "class AdvancedCustomLimitDisplay:\n    \"\"\"Display component for session-based P90 limits from general_limit sessions.\"\"\"\n    def __init__(self, console: Console) -> None:\n        self.console = console\n    def _collect_session_data(\n        self, blocks: Optional[List[Dict[str, Any]]] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Collect session data and identify limit sessions.\"\"\"\n        if not blocks:\n            return {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "format_error_screen",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "peekOfCode": "def format_error_screen(\n    plan: str = \"pro\", timezone: str = \"Europe/Warsaw\"\n) -> List[str]:\n    \"\"\"Legacy function - format error screen.\n    Maintained for backward compatibility.\n    \"\"\"\n    component = ErrorDisplayComponent()\n    return component.format_error_screen(plan, timezone)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "DisplayController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "peekOfCode": "class DisplayController:\n    \"\"\"Main controller for coordinating UI display operations.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize display controller with components.\"\"\"\n        self.session_display = SessionDisplayComponent()\n        self.loading_screen = LoadingScreenComponent()\n        self.error_display = ErrorDisplayComponent()\n        self.screen_manager = ScreenManager()\n        self.live_manager = LiveDisplayManager()\n        self.advanced_custom_display = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "LiveDisplayManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "peekOfCode": "class LiveDisplayManager:\n    \"\"\"Manager for Rich Live display operations.\"\"\"\n    def __init__(self, console: Optional[Console] = None) -> None:\n        \"\"\"Initialize live display manager.\n        Args:\n            console: Optional Rich console instance\n        \"\"\"\n        self._console = console\n        self._live_context: Optional[Live] = None\n        self._current_renderable: Optional[RenderableType] = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "ScreenBufferManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "peekOfCode": "class ScreenBufferManager:\n    \"\"\"Manager for screen buffer operations and rendering.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize screen buffer manager.\"\"\"\n        self.console: Optional[Console] = None\n    def create_screen_renderable(self, screen_buffer: List[str]) -> Group:\n        \"\"\"Create Rich renderable from screen buffer.\n        Args:\n            screen_buffer: List of screen lines with Rich markup\n        Returns:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "SessionCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "peekOfCode": "class SessionCalculator:\n    \"\"\"Handles session-related calculations for display purposes.\n    (Moved from ui/calculators.py)\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session calculator.\"\"\"\n        self.tz_handler = TimezoneHandler()\n    def calculate_time_data(\n        self, session_data: Dict[str, Any], current_time: datetime\n    ) -> Dict[str, Any]:\n        \"\"\"Calculate time-related data for the session.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "create_screen_renderable",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "peekOfCode": "def create_screen_renderable(screen_buffer: List[str]) -> Group:\n    \"\"\"Legacy function - create screen renderable.\n    Maintained for backward compatibility.\n    \"\"\"\n    manager = ScreenBufferManager()\n    return manager.create_screen_renderable(screen_buffer)\nclass SessionCalculator:\n    \"\"\"Handles session-related calculations for display purposes.\n    (Moved from ui/calculators.py)\"\"\"\n    def __init__(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "peekOfCode": "class HeaderManager:\n    \"\"\"Manager for header layout and formatting.\"\"\"\n    # Type constants for header configuration\n    DEFAULT_SEPARATOR_CHAR: Final[str] = \"=\"\n    DEFAULT_SEPARATOR_LENGTH: Final[int] = 60\n    DEFAULT_SPARKLES: Final[str] = \"✦ ✧ ✦ ✧\"\n    def __init__(self) -> None:\n        \"\"\"Initialize header manager.\"\"\"\n        self.separator_char: str = self.DEFAULT_SEPARATOR_CHAR\n        self.separator_length: int = self.DEFAULT_SEPARATOR_LENGTH",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ScreenManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "peekOfCode": "class ScreenManager:\n    \"\"\"Manager for overall screen layout and organization.\"\"\"\n    # Type constants for screen configuration\n    DEFAULT_SCREEN_WIDTH: Final[int] = 80\n    DEFAULT_SCREEN_HEIGHT: Final[int] = 24\n    DEFAULT_MARGIN: Final[int] = 0\n    def __init__(self) -> None:\n        \"\"\"Initialize screen manager.\"\"\"\n        self.screen_width: int = self.DEFAULT_SCREEN_WIDTH\n        self.screen_height: int = self.DEFAULT_SCREEN_HEIGHT",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "peekOfCode": "__all__ = [\"HeaderManager\", \"ScreenManager\"]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ModelStatsDict",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ModelStatsDict(TypedDict, total=False):\n    \"\"\"Type definition for model statistics dictionary.\"\"\"\n    input_tokens: int\n    output_tokens: int\n    total_tokens: int\n    cost: float\nclass ProgressBarStyleConfig(TypedDict, total=False):\n    \"\"\"Configuration for progress bar styling.\"\"\"\n    filled_char: str\n    empty_char: str",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ProgressBarStyleConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ProgressBarStyleConfig(TypedDict, total=False):\n    \"\"\"Configuration for progress bar styling.\"\"\"\n    filled_char: str\n    empty_char: str\n    filled_style: str | None\n    empty_style: str | None\nclass ThresholdConfig(TypedDict):\n    \"\"\"Configuration for color thresholds.\"\"\"\n    threshold: float\n    style: str",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ThresholdConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ThresholdConfig(TypedDict):\n    \"\"\"Configuration for color thresholds.\"\"\"\n    threshold: float\n    style: str\nclass ProgressBarRenderer(Protocol):\n    \"\"\"Protocol for progress bar rendering.\"\"\"\n    def render(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Render the progress bar.\"\"\"\n        ...\nclass BaseProgressBar(ABC):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ProgressBarRenderer",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ProgressBarRenderer(Protocol):\n    \"\"\"Protocol for progress bar rendering.\"\"\"\n    def render(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Render the progress bar.\"\"\"\n        ...\nclass BaseProgressBar(ABC):\n    \"\"\"Abstract base class for progress bar components.\"\"\"\n    # Type constants for validation\n    MIN_WIDTH: Final[int] = 10\n    MAX_WIDTH: Final[int] = 200",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "BaseProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class BaseProgressBar(ABC):\n    \"\"\"Abstract base class for progress bar components.\"\"\"\n    # Type constants for validation\n    MIN_WIDTH: Final[int] = 10\n    MAX_WIDTH: Final[int] = 200\n    DEFAULT_WIDTH: Final[int] = 50\n    # Default styling constants\n    DEFAULT_FILLED_CHAR: Final[str] = \"█\"\n    DEFAULT_EMPTY_CHAR: Final[str] = \"░\"\n    DEFAULT_MAX_PERCENTAGE: Final[float] = 100.0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TokenProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class TokenProgressBar(BaseProgressBar):\n    \"\"\"Token usage progress bar component.\"\"\"\n    # Color threshold constants\n    HIGH_USAGE_THRESHOLD: Final[float] = 90.0\n    MEDIUM_USAGE_THRESHOLD: Final[float] = 50.0\n    LOW_USAGE_THRESHOLD: Final[float] = 0.0\n    # Style constants\n    HIGH_USAGE_STYLE: Final[str] = \"cost.high\"\n    MEDIUM_USAGE_STYLE: Final[str] = \"cost.medium\"\n    LOW_USAGE_STYLE: Final[str] = \"cost.low\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TimeProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class TimeProgressBar(BaseProgressBar):\n    \"\"\"Time progress bar component for session duration.\"\"\"\n    def render(self, elapsed_minutes: float, total_minutes: float) -> str:\n        \"\"\"Render time progress bar.\n        Args:\n            elapsed_minutes: Minutes elapsed in session\n            total_minutes: Total session duration in minutes\n        Returns:\n            Formatted time progress bar string\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ModelUsageBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ModelUsageBar(BaseProgressBar):\n    \"\"\"Model usage progress bar showing Sonnet vs Opus distribution.\"\"\"\n    def render(self, per_model_stats: dict[str, Any]) -> str:\n        \"\"\"Render model usage progress bar.\n        Args:\n            per_model_stats: Dictionary of model statistics\n        Returns:\n            Formatted model usage bar string\n        \"\"\"\n        if not per_model_stats:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "SessionDisplayData",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "peekOfCode": "class SessionDisplayData:\n    \"\"\"Data container for session display information.\n    This replaces the 21 parameters in format_active_session_screen method.\n    \"\"\"\n    plan: str\n    timezone: str\n    tokens_used: int\n    token_limit: int\n    usage_percentage: float\n    tokens_left: int",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "SessionDisplayComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "peekOfCode": "class SessionDisplayComponent:\n    \"\"\"Main component for displaying active session information.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize session display component with sub-components.\"\"\"\n        self.token_progress = TokenProgressBar()\n        self.time_progress = TimeProgressBar()\n        self.model_usage = ModelUsageBar()\n    def _render_wide_progress_bar(self, percentage: float) -> str:\n        \"\"\"Render a wide progress bar (50 chars) using centralized progress bar logic.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "TableViewsController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "peekOfCode": "class TableViewsController:\n    \"\"\"Controller for table-based views (daily, monthly).\"\"\"\n    def __init__(self, console: Optional[Console] = None):\n        \"\"\"Initialize the table views controller.\n        Args:\n            console: Optional Console instance for rich output\n        \"\"\"\n        self.console = console\n        # Define simple styles\n        self.key_style = \"cyan\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TableViewsController:\n    \"\"\"Controller for table-based views (daily, monthly).\"\"\"\n    def __init__(self, console: Optional[Console] = None):\n        \"\"\"Initialize the table views controller.\n        Args:\n            console: Optional Console instance for rich output\n        \"\"\"\n        self.console = console\n        # Define simple styles",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "format_number",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "peekOfCode": "def format_number(value: Union[int, float], decimals: int = 0) -> str:\n    \"\"\"Format number with thousands separator.\n    Args:\n        value: Number to format\n        decimals: Number of decimal places (default: 0)\n    Returns:\n        Formatted number string with thousands separator\n    \"\"\"\n    if decimals > 0:\n        return f\"{value:,.{decimals}f}\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "peekOfCode": "def format_currency(amount: float, currency: str = \"USD\") -> str:\n    \"\"\"Format currency amount with appropriate symbol and formatting.\n    Args:\n        amount: The amount to format\n        currency: Currency code (default: USD)\n    Returns:\n        Formatted currency string\n    \"\"\"\n    amount: float = round(amount, 2)\n    if currency == \"USD\":",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "peekOfCode": "def format_time(minutes: float) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\n    This is a re-export from time_utils for backward compatibility.\n    Args:\n        minutes: Duration in minutes\n    Returns:\n        Formatted time string\n    \"\"\"\n    from claude_monitor.utils.time_utils import format_time as _format_time\n    return _format_time(minutes)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "peekOfCode": "def format_display_time(\n    dt_obj: datetime,\n    use_12h_format: Optional[bool] = None,\n    include_seconds: bool = True,\n) -> str:\n    \"\"\"Format datetime for display with 12h/24h support.\n    This is a re-export from time_utils for backward compatibility.\n    Args:\n        dt_obj: Datetime object to format\n        use_12h_format: Whether to use 12-hour format (None for auto-detect)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef format_number(value: Union[int, float], decimals: int = 0) -> str:\n    \"\"\"Format number with thousands separator.\n    Args:\n        value: Number to format\n        decimals: Number of decimal places (default: 0)\n    Returns:\n        Formatted number string with thousands separator\n    \"\"\"\n    if decimals > 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "peekOfCode": "def normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name to a standard format.\n    This function delegates to the implementation in core.models.\n    Args:\n        model: Model name to normalize\n    Returns:\n        Normalized model name\n    \"\"\"\n    from claude_monitor.core.models import normalize_model_name as _normalize_model_name\n    return _normalize_model_name(model)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "get_model_display_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "peekOfCode": "def get_model_display_name(model: str) -> str:\n    \"\"\"Get a display-friendly model name.\n    Args:\n        model: Model name to get display name for\n    Returns:\n        Display-friendly model name\n    \"\"\"\n    normalized: str = normalize_model_name(model)\n    display_names: Dict[str, str] = {\n        \"claude-3-opus\": \"Claude 3 Opus\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "is_claude_model",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "peekOfCode": "def is_claude_model(model: str) -> bool:\n    \"\"\"Check if a model is a Claude model.\n    Args:\n        model: Model name to check\n    Returns:\n        True if it's a Claude model, False otherwise\n    \"\"\"\n    normalized: str = normalize_model_name(model)\n    return normalized.startswith(\"claude-\")\ndef get_model_generation(model: str) -> str:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "get_model_generation",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "peekOfCode": "def get_model_generation(model: str) -> str:\n    \"\"\"Get the generation/version of a Claude model.\n    Args:\n        model: Model name\n    Returns:\n        Generation string (e.g., '3', '3.5') or 'unknown'\n    \"\"\"\n    if not model:\n        return \"unknown\"\n    model_lower: str = model.lower()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name to a standard format.\n    This function delegates to the implementation in core.models.\n    Args:\n        model: Model name to normalize\n    Returns:\n        Normalized model name\n    \"\"\"\n    from claude_monitor.core.models import normalize_model_name as _normalize_model_name",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "NotificationManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.notifications",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.notifications",
        "peekOfCode": "class NotificationManager:\n    \"\"\"Manages notification states and persistence.\"\"\"\n    def __init__(self, config_dir: Path) -> None:\n        self.notification_file: Path = config_dir / \"notification_states.json\"\n        self.states: Dict[str, Dict[str, Union[bool, Optional[datetime]]]] = (\n            self._load_states()\n        )\n        self.default_states: Dict[str, Dict[str, Union[bool, Optional[datetime]]]] = {\n            \"switch_to_custom\": {\"triggered\": False, \"timestamp\": None},\n            \"exceed_max_limit\": {\"triggered\": False, \"timestamp\": None},",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.notifications",
        "documentation": {}
    },
    {
        "label": "TimeFormatDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "class TimeFormatDetector:\n    \"\"\"Unified time format detection using multiple strategies.\"\"\"\n    TWELVE_HOUR_COUNTRIES: Set[str] = {\n        \"US\",\n        \"CA\",\n        \"AU\",\n        \"NZ\",\n        \"PH\",\n        \"IN\",\n        \"EG\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "SystemTimeDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "class SystemTimeDetector:\n    \"\"\"System timezone and time format detection.\"\"\"\n    @staticmethod\n    def get_timezone() -> str:\n        \"\"\"Detect system timezone.\"\"\"\n        tz: Optional[str] = os.environ.get(\"TZ\")\n        if tz:\n            return tz\n        system: str = platform.system()\n        if system == \"Darwin\":",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "class TimezoneHandler:\n    \"\"\"Handles timezone conversions and timestamp parsing.\"\"\"\n    def __init__(self, default_tz: str = \"UTC\") -> None:\n        \"\"\"Initialize with a default timezone.\"\"\"\n        self.default_tz: BaseTzInfo = self._validate_and_get_tz(default_tz)\n    def _validate_and_get_tz(self, tz_name: str) -> BaseTzInfo:\n        \"\"\"Validate and return pytz timezone object.\"\"\"\n        try:\n            return pytz.timezone(tz_name)\n        except pytz.exceptions.UnknownTimeZoneError:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_time_format_preference(args: Any = None) -> bool:\n    \"\"\"Get time format preference - returns True for 12h, False for 24h.\"\"\"\n    return TimeFormatDetector.get_preference(args)\ndef get_system_timezone() -> str:\n    \"\"\"Get system timezone.\"\"\"\n    return SystemTimeDetector.get_timezone()\ndef get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_system_timezone() -> str:\n    \"\"\"Get system timezone.\"\"\"\n    return SystemTimeDetector.get_timezone()\ndef get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_time_format",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"\n    hours = int(minutes // 60)\n    mins = int(minutes % 60)\n    if mins == 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"\n    hours = int(minutes // 60)\n    mins = int(minutes % 60)\n    if mins == 0:\n        return f\"{hours}h\"\n    return f\"{hours}h {mins}m\"\ndef percentage(part: float, whole: float, decimal_places: int = 1) -> float:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def percentage(part: float, whole: float, decimal_places: int = 1) -> float:\n    \"\"\"Calculate percentage with safe division.\n    Args:\n        part: Part value\n        whole: Whole value\n        decimal_places: Number of decimal places to round to\n    Returns:\n        Percentage value\n    \"\"\"\n    if whole == 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "peekOfCode": "def format_display_time(\n    dt_obj: datetime,\n    use_12h_format: Optional[bool] = None,\n    include_seconds: bool = True,\n) -> str:\n    \"\"\"Central time formatting with 12h/24h support.\"\"\"\n    if use_12h_format is None:\n        use_12h_format = get_time_format_preference()\n    if use_12h_format:\n        if include_seconds:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "parse_timestamp",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "peekOfCode": "def parse_timestamp(timestamp_str: str, default_tz: str = \"UTC\") -> Optional[datetime]:\n    \"\"\"Parse timestamp string with timezone handling.\n    Args:\n        timestamp_str: Timestamp string to parse\n        default_tz: Default timezone if not specified in timestamp\n    Returns:\n        Parsed datetime object or None if parsing fails\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler(default_tz)\n    return handler.parse_timestamp(timestamp_str)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "ensure_utc",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "peekOfCode": "def ensure_utc(dt: datetime, default_tz: str = \"UTC\") -> datetime:\n    \"\"\"Convert datetime to UTC.\n    Args:\n        dt: Datetime object to convert\n        default_tz: Default timezone for naive datetime objects\n    Returns:\n        UTC datetime object\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler(default_tz)\n    return handler.ensure_utc(dt)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "validate_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "peekOfCode": "def validate_timezone(tz_name: str) -> bool:\n    \"\"\"Check if timezone name is valid.\n    Args:\n        tz_name: Timezone name to validate\n    Returns:\n        True if valid, False otherwise\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler()\n    return handler.validate_timezone(tz_name)\ndef convert_to_timezone(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "convert_to_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "peekOfCode": "def convert_to_timezone(\n    dt: datetime, tz_name: str, default_tz: str = \"UTC\"\n) -> datetime:\n    \"\"\"Convert datetime to specific timezone.\n    Args:\n        dt: Datetime object to convert\n        tz_name: Target timezone name\n        default_tz: Default timezone for naive datetime objects\n    Returns:\n        Converted datetime object",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "get_version",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "peekOfCode": "def get_version() -> str:\n    \"\"\"Get version from package metadata.\n    This reads the version from the installed package metadata,\n    which is set from pyproject.toml during build/installation.\n    Returns:\n        Version string (e.g., \"3.0.0\")\n    \"\"\"\n    try:\n        return importlib.metadata.version(\"claude-monitor\")\n    except importlib.metadata.PackageNotFoundError:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "get_package_info",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "peekOfCode": "def get_package_info() -> Dict[str, Optional[str]]:\n    \"\"\"Get comprehensive package information.\n    Returns:\n        Dictionary containing version, name, and metadata\n    \"\"\"\n    try:\n        metadata = importlib.metadata.metadata(\"claude-monitor\")\n        return {\n            \"version\": get_version(),\n            \"name\": metadata.get(\"Name\"),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "get_version_info",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "peekOfCode": "def get_version_info() -> Dict[str, Any]:\n    \"\"\"Get detailed version and system information.\n    Returns:\n        Dictionary containing version, Python version, and system info\n    \"\"\"\n    return {\n        \"version\": get_version(),\n        \"python_version\": sys.version,\n        \"python_version_info\": {\n            \"major\": sys.version_info.major,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "find_project_root",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "peekOfCode": "def find_project_root(start_path: Optional[Union[str, Path]] = None) -> Optional[Path]:\n    \"\"\"Find the project root directory containing pyproject.toml.\n    Args:\n        start_path: Starting directory for search (defaults to current file location)\n    Returns:\n        Path to project root or None if not found\n    \"\"\"\n    if start_path is None:\n        current_dir = Path(__file__).parent\n    else:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "ErrorLevel",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "class ErrorLevel(str, Enum):\n    \"\"\"Error severity levels for logging.\"\"\"\n    INFO = \"info\"\n    ERROR = \"error\"\ndef report_error(\n    exception: Exception,\n    component: str,\n    context_name: Optional[str] = None,\n    context_data: Optional[Dict[str, Any]] = None,\n    tags: Optional[Dict[str, str]] = None,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "def report_error(\n    exception: Exception,\n    component: str,\n    context_name: Optional[str] = None,\n    context_data: Optional[Dict[str, Any]] = None,\n    tags: Optional[Dict[str, str]] = None,\n    level: ErrorLevel = ErrorLevel.ERROR,\n) -> None:\n    \"\"\"Report an exception with standardized logging and context.\n    Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_file_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "def report_file_error(\n    exception: Exception,\n    file_path: Union[str, Path],\n    operation: str = \"read\",\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report file-related errors with standardized context.\n    Args:\n        exception: The exception that occurred\n        file_path: Path to the file",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "get_error_context",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "def get_error_context() -> Dict[str, Any]:\n    \"\"\"Get standard error context information.\n    Returns:\n        Dictionary containing system and application context\n    \"\"\"\n    return {\n        \"python_version\": sys.version,\n        \"platform\": sys.platform,\n        \"cwd\": os.getcwd(),\n        \"pid\": os.getpid(),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_application_startup_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "def report_application_startup_error(\n    exception: Exception,\n    component: str = \"application_startup\",\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report application startup-related errors with system context.\n    Args:\n        exception: The startup exception\n        component: Component where startup failed\n        additional_context: Additional context data",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_configuration_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "peekOfCode": "def report_configuration_error(\n    exception: Exception,\n    config_file: Optional[Union[str, Path]] = None,\n    config_section: Optional[str] = None,\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report configuration-related errors.\n    Args:\n        exception: The configuration exception\n        config_file: Path to the configuration file",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.build.lib.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "setup_logging",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "peekOfCode": "def setup_logging(\n    level: str = \"INFO\", log_file: Optional[Path] = None, disable_console: bool = False\n) -> None:\n    \"\"\"Configure logging for the application.\n    Args:\n        level: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n        log_file: Optional file path for logging\n        disable_console: If True, disable console logging (useful for monitor mode)\n    \"\"\"\n    log_level = getattr(logging, level.upper(), logging.INFO)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "setup_environment",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "peekOfCode": "def setup_environment() -> None:\n    \"\"\"Initialize environment variables and system settings.\"\"\"\n    if sys.stdout.encoding != \"utf-8\":\n        if hasattr(sys.stdout, \"reconfigure\"):\n            sys.stdout.reconfigure(encoding=\"utf-8\")  # type: ignore[attr-defined]\n    os.environ.setdefault(\n        \"CLAUDE_MONITOR_CONFIG\", str(Path.home() / \".claude-monitor\" / \"config.yaml\")\n    )\n    os.environ.setdefault(\n        \"CLAUDE_MONITOR_CACHE_DIR\", str(Path.home() / \".claude-monitor\" / \"cache\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "init_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "peekOfCode": "def init_timezone(timezone: str = \"Europe/Warsaw\") -> TimezoneHandler:\n    \"\"\"Initialize timezone handler.\n    Args:\n        timezone: Timezone string (e.g. \"Europe/Warsaw\", \"UTC\")\n    Returns:\n        Configured TimezoneHandler instance\n    \"\"\"\n    tz_handler = TimezoneHandler()\n    if timezone != \"Europe/Warsaw\":\n        tz_handler.set_timezone(timezone)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "ensure_directories",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "peekOfCode": "def ensure_directories() -> None:\n    \"\"\"Ensure required directories exist.\"\"\"\n    dirs = [\n        Path.home() / \".claude-monitor\",\n        Path.home() / \".claude-monitor\" / \"cache\",\n        Path.home() / \".claude-monitor\" / \"logs\",\n        Path.home() / \".claude-monitor\" / \"reports\",\n    ]\n    for directory in dirs:\n        directory.mkdir(parents=True, exist_ok=True)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.bootstrap",
        "documentation": {}
    },
    {
        "label": "get_standard_claude_paths",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "def get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories\n    \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "discover_claude_data_paths",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "def discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories\n    \"\"\"\n    paths_to_check: List[str] = (\n        [str(p) for p in custom_paths] if custom_paths else get_standard_claude_paths()\n    )",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "def main(argv: Optional[List[str]] = None) -> int:\n    \"\"\"Main entry point with direct pydantic-settings integration.\"\"\"\n    if argv is None:\n        argv = sys.argv[1:]\n    if \"--version\" in argv or \"-v\" in argv:\n        print(f\"claude-monitor {__version__}\")\n        return 0\n    try:\n        settings = Settings.load_with_last_used(argv)\n        setup_environment()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "handle_application_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "def handle_application_error(\n    exception: Exception,\n    component: str = \"cli_main\",\n    exit_code: int = 1,\n) -> NoReturn:\n    \"\"\"Handle application-level errors with proper logging and exit.\n    Args:\n        exception: The exception that occurred\n        component: Component where the error occurred\n        exit_code: Exit code to use when terminating",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "validate_cli_environment",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "def validate_cli_environment() -> Optional[str]:\n    \"\"\"Validate the CLI environment and return error message if invalid.\n    Returns:\n        Error message if validation fails, None if successful\n    \"\"\"\n    try:\n        # Check Python version compatibility\n        if sys.version_info < (3, 8):\n            return f\"Python 3.8+ required, found {sys.version_info.major}.{sys.version_info.minor}\"\n        # Check for required dependencies",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "DataUpdateCallback",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "DataUpdateCallback = Callable[[Dict[str, Any]], None]\nSessionChangeCallback = Callable[[str, str, Optional[Dict[str, Any]]], None]\ndef get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "SessionChangeCallback",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "peekOfCode": "SessionChangeCallback = Callable[[str, str, Optional[Dict[str, Any]]], None]\ndef get_standard_claude_paths() -> List[str]:\n    \"\"\"Get list of standard Claude data directory paths to check.\"\"\"\n    return [\"~/.claude/projects\", \"~/.config/claude/projects\"]\ndef discover_claude_data_paths(custom_paths: Optional[List[str]] = None) -> List[Path]:\n    \"\"\"Discover all available Claude data directories.\n    Args:\n        custom_paths: Optional list of custom paths to check instead of standard ones\n    Returns:\n        List of Path objects for existing Claude data directories",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.cli.main",
        "documentation": {}
    },
    {
        "label": "BlockLike",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "peekOfCode": "class BlockLike(Protocol):\n    \"\"\"Protocol for objects that behave like session blocks.\"\"\"\n    is_active: bool\n    duration_minutes: float\n    token_counts: TokenCounts\n    cost_usd: float\n    end_time: datetime\nclass BurnRateCalculator:\n    \"\"\"Calculates burn rates and usage projections for session blocks.\"\"\"\n    def calculate_burn_rate(self, block: BlockLike) -> Optional[BurnRate]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "BurnRateCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "peekOfCode": "class BurnRateCalculator:\n    \"\"\"Calculates burn rates and usage projections for session blocks.\"\"\"\n    def calculate_burn_rate(self, block: BlockLike) -> Optional[BurnRate]:\n        \"\"\"Calculate current consumption rate for active blocks.\"\"\"\n        if not block.is_active or block.duration_minutes < 1:\n            return None\n        total_tokens = (\n            block.token_counts.input_tokens\n            + block.token_counts.output_tokens\n            + block.token_counts.cache_creation_tokens",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "calculate_hourly_burn_rate",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "peekOfCode": "def calculate_hourly_burn_rate(\n    blocks: List[Dict[str, Any]], current_time: datetime\n) -> float:\n    \"\"\"Calculate burn rate based on all sessions in the last hour.\"\"\"\n    if not blocks:\n        return 0.0\n    one_hour_ago = current_time - timedelta(hours=1)\n    total_tokens = _calculate_total_tokens_in_hour(blocks, one_hour_ago, current_time)\n    return total_tokens / 60.0 if total_tokens > 0 else 0.0\ndef _calculate_total_tokens_in_hour(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.calculations",
        "documentation": {}
    },
    {
        "label": "TimestampProcessor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "peekOfCode": "class TimestampProcessor:\n    \"\"\"Unified timestamp parsing and processing utilities.\"\"\"\n    def __init__(self, timezone_handler: Optional[TimezoneHandler] = None) -> None:\n        \"\"\"Initialize with optional timezone handler.\"\"\"\n        self.timezone_handler: TimezoneHandler = timezone_handler or TimezoneHandler()\n    def parse_timestamp(\n        self, timestamp_value: Union[str, int, float, datetime, None]\n    ) -> Optional[datetime]:\n        \"\"\"Parse timestamp from various formats to UTC datetime.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "TokenExtractor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "peekOfCode": "class TokenExtractor:\n    \"\"\"Unified token extraction utilities.\"\"\"\n    @staticmethod\n    def extract_tokens(data: Dict[str, Any]) -> Dict[str, int]:\n        \"\"\"Extract token counts from data in standardized format.\n        Args:\n            data: Data dictionary with token information\n        Returns:\n            Dictionary with standardized token keys and counts\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "DataConverter",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "peekOfCode": "class DataConverter:\n    \"\"\"Unified data conversion utilities.\"\"\"\n    @staticmethod\n    def flatten_nested_dict(data: Dict[str, Any], prefix: str = \"\") -> Dict[str, Any]:\n        \"\"\"Flatten nested dictionary structure.\n        Args:\n            data: Nested dictionary\n            prefix: Prefix for flattened keys\n        Returns:\n            Flattened dictionary",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.data_processors",
        "documentation": {}
    },
    {
        "label": "CostMode",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class CostMode(Enum):\n    \"\"\"Cost calculation modes for token usage analysis.\"\"\"\n    AUTO = \"auto\"\n    CACHED = \"cached\"\n    CALCULATED = \"calculate\"\n@dataclass\nclass UsageEntry:\n    \"\"\"Individual usage record from Claude usage data.\"\"\"\n    timestamp: datetime\n    input_tokens: int",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageEntry",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class UsageEntry:\n    \"\"\"Individual usage record from Claude usage data.\"\"\"\n    timestamp: datetime\n    input_tokens: int\n    output_tokens: int\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost_usd: float = 0.0\n    model: str = \"\"\n    message_id: str = \"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "TokenCounts",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class TokenCounts:\n    \"\"\"Token aggregation structure with computed totals.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    @property\n    def total_tokens(self) -> int:\n        \"\"\"Get total tokens across all types.\"\"\"\n        return (",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "BurnRate",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class BurnRate:\n    \"\"\"Token consumption rate metrics.\"\"\"\n    tokens_per_minute: float\n    cost_per_hour: float\n@dataclass\nclass UsageProjection:\n    \"\"\"Usage projection calculations for active blocks.\"\"\"\n    projected_total_tokens: int\n    projected_total_cost: float\n    remaining_minutes: float",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "UsageProjection",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class UsageProjection:\n    \"\"\"Usage projection calculations for active blocks.\"\"\"\n    projected_total_tokens: int\n    projected_total_cost: float\n    remaining_minutes: float\n@dataclass\nclass SessionBlock:\n    \"\"\"Aggregated session block representing a 5-hour period.\"\"\"\n    id: str\n    start_time: datetime",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "SessionBlock",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "class SessionBlock:\n    \"\"\"Aggregated session block representing a 5-hour period.\"\"\"\n    id: str\n    start_time: datetime\n    end_time: datetime\n    entries: List[UsageEntry] = field(default_factory=list)\n    token_counts: TokenCounts = field(default_factory=TokenCounts)\n    is_active: bool = False\n    is_gap: bool = False\n    burn_rate: Optional[BurnRate] = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "peekOfCode": "def normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name for consistent usage across the application.\n    Handles various model name formats and maps them to standard keys.\n    (Moved from utils/model_utils.py)\n    Args:\n        model: Raw model name from usage data\n    Returns:\n        Normalized model key\n    Examples:\n        >>> normalize_model_name(\"claude-3-opus-20240229\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.models",
        "documentation": {}
    },
    {
        "label": "P90Config",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "peekOfCode": "class P90Config:\n    common_limits: Sequence[int]\n    limit_threshold: float\n    default_min_limit: int\n    cache_ttl_seconds: int\ndef _did_hit_limit(tokens: int, common_limits: Sequence[int], threshold: float) -> bool:\n    return any(tokens >= limit * threshold for limit in common_limits)\ndef _extract_sessions(\n    blocks: Sequence[Dict[str, Any]], filter_fn: Callable[[Dict[str, Any]], bool]\n) -> List[int]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "P90Calculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "peekOfCode": "class P90Calculator:\n    def __init__(self, config: Optional[P90Config] = None) -> None:\n        if config is None:\n            from claude_monitor.core.plans import (\n                COMMON_TOKEN_LIMITS,\n                DEFAULT_TOKEN_LIMIT,\n                LIMIT_DETECTION_THRESHOLD,\n            )\n            config = P90Config(\n                common_limits=COMMON_TOKEN_LIMITS,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.p90_calculator",
        "documentation": {}
    },
    {
        "label": "PlanType",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "peekOfCode": "class PlanType(Enum):\n    \"\"\"Available Claude subscription plan types.\"\"\"\n    PRO = \"pro\"\n    MAX5 = \"max5\"\n    MAX20 = \"max20\"\n    CUSTOM = \"custom\"\n    @classmethod\n    def from_string(cls, value: str) -> \"PlanType\":\n        \"\"\"Case-insensitive creation of PlanType from a string.\"\"\"\n        try:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PlanConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "peekOfCode": "class PlanConfig:\n    \"\"\"Immutable configuration for a Claude subscription plan.\"\"\"\n    name: str\n    token_limit: int\n    cost_limit: float\n    message_limit: int\n    display_name: str\n    @property\n    def formatted_token_limit(self) -> str:\n        \"\"\"Human-readable token limit (e.g., '19k' instead of '19000').\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "Plans",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "peekOfCode": "class Plans:\n    \"\"\"Registry and shared constants for all plan configurations.\"\"\"\n    DEFAULT_TOKEN_LIMIT: int = _DEFAULTS[\"token_limit\"]\n    DEFAULT_COST_LIMIT: float = _DEFAULTS[\"cost_limit\"]\n    DEFAULT_MESSAGE_LIMIT: int = _DEFAULTS[\"message_limit\"]\n    COMMON_TOKEN_LIMITS: List[int] = [19_000, 88_000, 220_000, 880_000]\n    LIMIT_DETECTION_THRESHOLD: float = 0.95\n    @classmethod\n    def _build_config(cls, plan_type: PlanType) -> PlanConfig:\n        \"\"\"Instantiate PlanConfig from the PLAN_LIMITS dictionary.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_token_limit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "peekOfCode": "def get_token_limit(plan: str, blocks: Optional[List[Dict[str, Any]]] = None) -> int:\n    \"\"\"Get token limit for a plan, using P90 for custom plans.\n    Args:\n        plan: Plan type ('pro', 'max5', 'max20', 'custom')\n        blocks: Optional session blocks for custom P90 calculation\n    Returns:\n        Token limit for the plan\n    \"\"\"\n    return Plans.get_token_limit(plan, blocks)\ndef get_cost_limit(plan: str) -> float:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "get_cost_limit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "peekOfCode": "def get_cost_limit(plan: str) -> float:\n    \"\"\"Get standard cost limit for a plan.\n    Args:\n        plan: Plan type ('pro', 'max5', 'max20', 'custom')\n    Returns:\n        Cost limit for the plan in USD\n    \"\"\"\n    return Plans.get_cost_limit(plan)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.plans",
        "documentation": {}
    },
    {
        "label": "PricingCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.pricing",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.pricing",
        "peekOfCode": "class PricingCalculator:\n    \"\"\"Calculates costs based on model pricing with caching support.\n    This class provides methods for calculating costs for individual models/tokens\n    as well as detailed cost breakdowns for collections of usage entries.\n    It supports custom pricing configurations and caches calculations for performance.\n    Features:\n    - Configurable pricing (from config or custom)\n    - Fallback hardcoded pricing for robustness\n    - Caching for performance\n    - Support for all token types including cache",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.pricing",
        "documentation": {}
    },
    {
        "label": "LastUsedParams",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "peekOfCode": "class LastUsedParams:\n    \"\"\"Manages last used parameters persistence (moved from last_used.py).\"\"\"\n    def __init__(self, config_dir: Optional[Path] = None) -> None:\n        \"\"\"Initialize with config directory.\"\"\"\n        self.config_dir = config_dir or Path.home() / \".claude-monitor\"\n        self.params_file = self.config_dir / \"last_used.json\"\n    def save(self, settings: \"Settings\") -> None:\n        \"\"\"Save current settings as last used.\"\"\"\n        try:\n            params = {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "peekOfCode": "class Settings(BaseSettings):\n    \"\"\"claude-monitor - Real-time token usage monitoring for Claude AI\"\"\"\n    model_config = SettingsConfigDict(\n        env_file=None,\n        env_prefix=\"\",\n        case_sensitive=False,\n        validate_default=True,\n        extra=\"ignore\",\n        cli_parse_args=True,\n        cli_prog_name=\"claude-monitor\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass LastUsedParams:\n    \"\"\"Manages last used parameters persistence (moved from last_used.py).\"\"\"\n    def __init__(self, config_dir: Optional[Path] = None) -> None:\n        \"\"\"Initialize with config directory.\"\"\"\n        self.config_dir = config_dir or Path.home() / \".claude-monitor\"\n        self.params_file = self.config_dir / \"last_used.json\"\n    def save(self, settings: \"Settings\") -> None:\n        \"\"\"Save current settings as last used.\"\"\"\n        try:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.core.settings",
        "documentation": {}
    },
    {
        "label": "AggregatedStats",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "peekOfCode": "class AggregatedStats:\n    \"\"\"Statistics for aggregated usage data.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost: float = 0.0\n    count: int = 0\n    def add_entry(self, entry: UsageEntry) -> None:\n        \"\"\"Add an entry's statistics to this aggregate.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "AggregatedPeriod",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "peekOfCode": "class AggregatedPeriod:\n    \"\"\"Aggregated data for a time period (day or month).\"\"\"\n    period_key: str\n    stats: AggregatedStats = field(default_factory=AggregatedStats)\n    models_used: set = field(default_factory=set)\n    model_breakdowns: Dict[str, AggregatedStats] = field(\n        default_factory=lambda: defaultdict(AggregatedStats)\n    )\n    def add_entry(self, entry: UsageEntry) -> None:\n        \"\"\"Add an entry to this period's aggregate.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "UsageAggregator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "peekOfCode": "class UsageAggregator:\n    \"\"\"Aggregates usage data for daily and monthly reports.\"\"\"\n    def __init__(\n        self, data_path: str, aggregation_mode: str = \"daily\", timezone: str = \"UTC\"\n    ):\n        \"\"\"Initialize the aggregator.\n        Args:\n            data_path: Path to the data directory\n            aggregation_mode: Mode of aggregation ('daily' or 'monthly')\n            timezone: Timezone string for date formatting",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "peekOfCode": "logger = logging.getLogger(__name__)\n@dataclass\nclass AggregatedStats:\n    \"\"\"Statistics for aggregated usage data.\"\"\"\n    input_tokens: int = 0\n    output_tokens: int = 0\n    cache_creation_tokens: int = 0\n    cache_read_tokens: int = 0\n    cost: float = 0.0\n    count: int = 0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.aggregator",
        "documentation": {}
    },
    {
        "label": "analyze_usage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "peekOfCode": "def analyze_usage(\n    hours_back: Optional[int] = 96,\n    use_cache: bool = True,\n    quick_start: bool = False,\n    data_path: Optional[str] = None,\n) -> Dict[str, Any]:\n    \"\"\"\n    Main entry point to generate response_final.json.\n    Algorithm redesigned to:\n    1. First divide all outputs into blocks",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef analyze_usage(\n    hours_back: Optional[int] = 96,\n    use_cache: bool = True,\n    quick_start: bool = False,\n    data_path: Optional[str] = None,\n) -> Dict[str, Any]:\n    \"\"\"\n    Main entry point to generate response_final.json.\n    Algorithm redesigned to:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analysis",
        "documentation": {}
    },
    {
        "label": "SessionAnalyzer",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "peekOfCode": "class SessionAnalyzer:\n    \"\"\"Creates session blocks and detects limits.\"\"\"\n    def __init__(self, session_duration_hours: int = 5):\n        \"\"\"Initialize analyzer with session duration.\n        Args:\n            session_duration_hours: Duration of each session block in hours\n        \"\"\"\n        self.session_duration_hours = session_duration_hours\n        self.session_duration = timedelta(hours=session_duration_hours)\n        self.timezone_handler = TimezoneHandler()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionAnalyzer:\n    \"\"\"Creates session blocks and detects limits.\"\"\"\n    def __init__(self, session_duration_hours: int = 5):\n        \"\"\"Initialize analyzer with session duration.\n        Args:\n            session_duration_hours: Duration of each session block in hours\n        \"\"\"\n        self.session_duration_hours = session_duration_hours\n        self.session_duration = timedelta(hours=session_duration_hours)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.analyzer",
        "documentation": {}
    },
    {
        "label": "UsageEntryMapper",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "class UsageEntryMapper:\n    \"\"\"Compatibility wrapper for legacy UsageEntryMapper interface.\n    This class provides backward compatibility for tests that expect\n    the old UsageEntryMapper interface, wrapping the new functional\n    approach in _map_to_usage_entry.\n    \"\"\"\n    def __init__(\n        self, pricing_calculator: PricingCalculator, timezone_handler: TimezoneHandler\n    ):\n        \"\"\"Initialize with required components.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_usage_entries",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "def load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:\n        data_path: Path to Claude data directory (defaults to ~/.claude/projects)\n        hours_back: Only include entries from last N hours",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "load_all_raw_entries",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "def load_all_raw_entries(data_path: Optional[str] = None) -> List[Dict[str, Any]]:\n    \"\"\"Load all raw JSONL entries without processing.\n    Args:\n        data_path: Path to Claude data directory\n    Returns:\n        List of raw JSON dictionaries\n    \"\"\"\n    data_path = Path(data_path if data_path else \"~/.claude/projects\").expanduser()\n    jsonl_files = _find_jsonl_files(data_path)\n    all_raw_entries: List[Dict[str, Any]] = []",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "FIELD_COST_USD",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "FIELD_COST_USD = \"cost_usd\"\nFIELD_MODEL = \"model\"\nTOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "FIELD_MODEL",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "FIELD_MODEL = \"model\"\nTOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "TOKEN_INPUT",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "TOKEN_INPUT = \"input_tokens\"\nTOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "TOKEN_OUTPUT",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "TOKEN_OUTPUT = \"output_tokens\"\nlogger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef load_usage_entries(\n    data_path: Optional[str] = None,\n    hours_back: Optional[int] = None,\n    mode: CostMode = CostMode.AUTO,\n    include_raw: bool = False,\n) -> Tuple[List[UsageEntry], Optional[List[Dict[str, Any]]]]:\n    \"\"\"Load and convert JSONL files to UsageEntry objects.\n    Args:\n        data_path: Path to Claude data directory (defaults to ~/.claude/projects)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.data.reader",
        "documentation": {}
    },
    {
        "label": "DataManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "peekOfCode": "class DataManager:\n    \"\"\"Manages data fetching and caching for monitoring.\"\"\"\n    def __init__(\n        self,\n        cache_ttl: int = 30,\n        hours_back: int = 192,\n        data_path: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize data manager with cache and fetch settings.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass DataManager:\n    \"\"\"Manages data fetching and caching for monitoring.\"\"\"\n    def __init__(\n        self,\n        cache_ttl: int = 30,\n        hours_back: int = 192,\n        data_path: Optional[str] = None,\n    ) -> None:\n        \"\"\"Initialize data manager with cache and fetch settings.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.data_manager",
        "documentation": {}
    },
    {
        "label": "MonitoringOrchestrator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "peekOfCode": "class MonitoringOrchestrator:\n    \"\"\"Orchestrates monitoring components following SRP.\"\"\"\n    def __init__(\n        self, update_interval: int = 10, data_path: Optional[str] = None\n    ) -> None:\n        \"\"\"Initialize orchestrator with components.\n        Args:\n            update_interval: Seconds between updates\n            data_path: Optional path to Claude data directory\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass MonitoringOrchestrator:\n    \"\"\"Orchestrates monitoring components following SRP.\"\"\"\n    def __init__(\n        self, update_interval: int = 10, data_path: Optional[str] = None\n    ) -> None:\n        \"\"\"Initialize orchestrator with components.\n        Args:\n            update_interval: Seconds between updates\n            data_path: Optional path to Claude data directory",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.orchestrator",
        "documentation": {}
    },
    {
        "label": "SessionMonitor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "peekOfCode": "class SessionMonitor:\n    \"\"\"Monitors sessions with tracking and validation.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session monitor.\"\"\"\n        self._current_session_id: Optional[str] = None\n        self._session_callbacks: List[\n            Callable[[str, str, Optional[Dict[str, Any]]], None]\n        ] = []\n        self._session_history: List[Dict[str, Any]] = []\n    def update(self, data: Dict[str, Any]) -> Tuple[bool, List[str]]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass SessionMonitor:\n    \"\"\"Monitors sessions with tracking and validation.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session monitor.\"\"\"\n        self._current_session_id: Optional[str] = None\n        self._session_callbacks: List[\n            Callable[[str, str, Optional[Dict[str, Any]]], None]\n        ] = []\n        self._session_history: List[Dict[str, Any]] = []",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.monitoring.session_monitor",
        "documentation": {}
    },
    {
        "label": "setup_terminal",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "peekOfCode": "def setup_terminal() -> Optional[List[Any]]:\n    \"\"\"Setup terminal for raw mode to prevent input interference.\n    Returns:\n        Terminal settings list that can be used to restore terminal state,\n        or None if terminal setup is not supported or fails.\n    \"\"\"\n    if not HAS_TERMIOS or not sys.stdin.isatty():\n        return None\n    try:\n        old_settings: List[Any] = termios.tcgetattr(sys.stdin)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "restore_terminal",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "peekOfCode": "def restore_terminal(old_settings: Optional[List[Any]]) -> None:\n    \"\"\"Restore terminal to original settings.\n    Args:\n        old_settings: Terminal settings to restore, or None if no settings to restore.\n    \"\"\"\n    # Send ANSI escape sequences to show cursor and exit alternate screen\n    print(\"\\033[?25h\\033[?1049l\", end=\"\", flush=True)\n    if old_settings and HAS_TERMIOS and sys.stdin.isatty():\n        try:\n            termios.tcsetattr(sys.stdin, termios.TCSANOW, old_settings)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "enter_alternate_screen",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "peekOfCode": "def enter_alternate_screen() -> None:\n    \"\"\"Enter alternate screen buffer, clear and hide cursor.\n    Sends ANSI escape sequences to:\n    - Enter alternate screen buffer (\\033[?1049h)\n    - Clear screen (\\033[2J)\n    - Move cursor to home position (\\033[H)\n    - Hide cursor (\\033[?25l)\n    \"\"\"\n    print(\"\\033[?1049h\\033[2J\\033[H\\033[?25l\", end=\"\", flush=True)\ndef handle_cleanup_and_exit(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_cleanup_and_exit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "peekOfCode": "def handle_cleanup_and_exit(\n    old_terminal_settings: Optional[List[Any]], message: str = \"Monitoring stopped.\"\n) -> None:\n    \"\"\"Handle cleanup and exit gracefully.\n    Args:\n        old_terminal_settings: Terminal settings to restore before exit.\n        message: Exit message to display to user.\n    \"\"\"\n    restore_terminal(old_terminal_settings)\n    print_themed(f\"\\n\\n{message}\", style=\"info\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "handle_error_and_exit",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "peekOfCode": "def handle_error_and_exit(\n    old_terminal_settings: Optional[List[Any]], error: Union[Exception, str]\n) -> None:\n    \"\"\"Handle error cleanup and exit.\n    Args:\n        old_terminal_settings: Terminal settings to restore before exit.\n        error: Exception or error message that caused the exit.\n    Raises:\n        The original error after cleanup and reporting.\n    \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.manager",
        "documentation": {}
    },
    {
        "label": "BackgroundType",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "class BackgroundType(Enum):\n    \"\"\"Background detection types.\"\"\"\n    LIGHT = \"light\"\n    DARK = \"dark\"\n    UNKNOWN = \"unknown\"\n@dataclass\nclass ThemeConfig:\n    \"\"\"Theme configuration for terminal display.\n    Attributes:\n        name: Human-readable theme name.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "ThemeConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "class ThemeConfig:\n    \"\"\"Theme configuration for terminal display.\n    Attributes:\n        name: Human-readable theme name.\n        colors: Mapping of color keys to ANSI/hex color values.\n        symbols: Unicode symbols and ASCII fallbacks for theme.\n        rich_theme: Rich library theme configuration.\n    \"\"\"\n    name: str\n    colors: Dict[str, str]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "AdaptiveColorScheme",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "class AdaptiveColorScheme:\n    \"\"\"Scientifically-based adaptive color schemes with proper contrast ratios.\n    IMPORTANT: This only changes FONT/FOREGROUND colors, never background colors.\n    The terminal's background remains unchanged - we adapt text colors for readability.\n    All color choices follow WCAG AA accessibility standards for contrast ratios.\n    \"\"\"\n    @staticmethod\n    def get_light_background_theme() -> Theme:\n        \"\"\"Font colors optimized for light terminal backgrounds (WCAG AA+ contrast).\"\"\"\n        return Theme(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "BackgroundDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "class BackgroundDetector:\n    \"\"\"Detects terminal background type using multiple methods.\n    Uses environment variables, OSC queries, and heuristics to determine\n    whether the terminal has a light or dark background for optimal theming.\n    \"\"\"\n    @staticmethod\n    def detect_background() -> BackgroundType:\n        \"\"\"Detect terminal background using multiple methods.\n        Tries multiple detection methods in order of reliability:\n        1. COLORFGBG environment variable",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "ThemeManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "class ThemeManager:\n    \"\"\"Manages themes with auto-detection and thread safety.\"\"\"\n    def __init__(self):\n        self._lock = threading.Lock()\n        self._current_theme: Optional[ThemeConfig] = None\n        self._forced_theme: Optional[str] = None\n        self.themes = self._load_themes()\n    def _load_themes(self) -> Dict[str, ThemeConfig]:\n        \"\"\"Load all available themes.\n        Creates theme configurations for light, dark, and classic themes",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_cost_style",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "def get_cost_style(cost: float) -> str:\n    \"\"\"Get appropriate style for a cost value.\n    Args:\n        cost: Cost value in USD to categorize.\n    Returns:\n        Rich style name for the cost category.\n    \"\"\"\n    for threshold, style in COST_THRESHOLDS:\n        if cost >= threshold:\n            return style",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_velocity_indicator",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "def get_velocity_indicator(burn_rate: float) -> Dict[str, str]:\n    \"\"\"Get velocity indicator based on burn rate.\n    Args:\n        burn_rate: Token consumption rate (tokens per minute).\n    Returns:\n        Dictionary with 'emoji' and 'label' keys for the velocity category.\n    \"\"\"\n    for indicator in VELOCITY_INDICATORS.values():\n        threshold_value = indicator[\"threshold\"]\n        if isinstance(threshold_value, (int, float)) and burn_rate < threshold_value:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_theme",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "def get_theme(name: Optional[str] = None) -> Theme:\n    \"\"\"Get Rich theme by name or auto-detect.\n    Args:\n        name: Theme name ('light', 'dark', 'classic') or None for auto-detection\n    Returns:\n        Rich Theme object\n    \"\"\"\n    theme_config = _theme_manager.get_theme(name)\n    return theme_config.rich_theme\ndef get_themed_console(force_theme: Optional[Union[str, bool]] = None) -> Console:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "get_themed_console",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "def get_themed_console(force_theme: Optional[Union[str, bool]] = None) -> Console:\n    \"\"\"Get themed console - backward compatibility wrapper.\n    Args:\n        force_theme: Theme name to force, or None for auto-detection.\n    Returns:\n        Rich Console instance with appropriate theme.\n    \"\"\"\n    if force_theme and isinstance(force_theme, str):\n        return _theme_manager.get_console(force_theme)\n    return _theme_manager.get_console(None)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "print_themed",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "peekOfCode": "def print_themed(text: str, style: str = \"info\") -> None:\n    \"\"\"Print text with themed styling - backward compatibility.\n    Args:\n        text: Text to print with styling.\n        style: Rich style name to apply.\n    \"\"\"\n    console: Console = _theme_manager.get_console()\n    console.print(f\"[{style}]{text}[/]\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.terminal.themes",
        "documentation": {}
    },
    {
        "label": "VelocityIndicator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "class VelocityIndicator:\n    \"\"\"Velocity indicator component for burn rate visualization.\"\"\"\n    @staticmethod\n    def get_velocity_emoji(burn_rate: float) -> str:\n        \"\"\"Get velocity emoji based on burn rate.\n        Args:\n            burn_rate: Token burn rate per minute\n        Returns:\n            Emoji representing velocity level\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "CostIndicator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "class CostIndicator:\n    \"\"\"Cost indicator component for cost visualization.\"\"\"\n    @staticmethod\n    def render(cost: float, currency: str = \"USD\") -> str:\n        \"\"\"Render cost indicator with appropriate styling.\n        Args:\n            cost: Cost amount\n            currency: Currency symbol/code\n        Returns:\n            Formatted cost indicator",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "ErrorDisplayComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "class ErrorDisplayComponent:\n    \"\"\"Error display component for handling error states.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize error display component.\"\"\"\n    def format_error_screen(\n        self, plan: str = \"pro\", timezone: str = \"Europe/Warsaw\"\n    ) -> List[str]:\n        \"\"\"Format error screen for failed data fetch.\n        Args:\n            plan: Current plan name",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "LoadingScreenComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "class LoadingScreenComponent:\n    \"\"\"Loading screen component for displaying loading states.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize loading screen component.\"\"\"\n    def create_loading_screen(\n        self,\n        plan: str = \"pro\",\n        timezone: str = \"Europe/Warsaw\",\n        custom_message: Optional[str] = None,\n    ) -> List[str]:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "AdvancedCustomLimitDisplay",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "class AdvancedCustomLimitDisplay:\n    \"\"\"Display component for session-based P90 limits from general_limit sessions.\"\"\"\n    def __init__(self, console: Console) -> None:\n        self.console = console\n    def _collect_session_data(\n        self, blocks: Optional[List[Dict[str, Any]]] = None\n    ) -> Dict[str, Any]:\n        \"\"\"Collect session data and identify limit sessions.\"\"\"\n        if not blocks:\n            return {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "format_error_screen",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "peekOfCode": "def format_error_screen(\n    plan: str = \"pro\", timezone: str = \"Europe/Warsaw\"\n) -> List[str]:\n    \"\"\"Legacy function - format error screen.\n    Maintained for backward compatibility.\n    \"\"\"\n    component = ErrorDisplayComponent()\n    return component.format_error_screen(plan, timezone)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.components",
        "documentation": {}
    },
    {
        "label": "DisplayController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "peekOfCode": "class DisplayController:\n    \"\"\"Main controller for coordinating UI display operations.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize display controller with components.\"\"\"\n        self.session_display = SessionDisplayComponent()\n        self.loading_screen = LoadingScreenComponent()\n        self.error_display = ErrorDisplayComponent()\n        self.screen_manager = ScreenManager()\n        self.live_manager = LiveDisplayManager()\n        self.advanced_custom_display = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "LiveDisplayManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "peekOfCode": "class LiveDisplayManager:\n    \"\"\"Manager for Rich Live display operations.\"\"\"\n    def __init__(self, console: Optional[Console] = None) -> None:\n        \"\"\"Initialize live display manager.\n        Args:\n            console: Optional Rich console instance\n        \"\"\"\n        self._console = console\n        self._live_context: Optional[Live] = None\n        self._current_renderable: Optional[RenderableType] = None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "ScreenBufferManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "peekOfCode": "class ScreenBufferManager:\n    \"\"\"Manager for screen buffer operations and rendering.\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize screen buffer manager.\"\"\"\n        self.console: Optional[Console] = None\n    def create_screen_renderable(self, screen_buffer: List[str]) -> Group:\n        \"\"\"Create Rich renderable from screen buffer.\n        Args:\n            screen_buffer: List of screen lines with Rich markup\n        Returns:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "SessionCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "peekOfCode": "class SessionCalculator:\n    \"\"\"Handles session-related calculations for display purposes.\n    (Moved from ui/calculators.py)\"\"\"\n    def __init__(self) -> None:\n        \"\"\"Initialize session calculator.\"\"\"\n        self.tz_handler = TimezoneHandler()\n    def calculate_time_data(\n        self, session_data: Dict[str, Any], current_time: datetime\n    ) -> Dict[str, Any]:\n        \"\"\"Calculate time-related data for the session.",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "create_screen_renderable",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "peekOfCode": "def create_screen_renderable(screen_buffer: List[str]) -> Group:\n    \"\"\"Legacy function - create screen renderable.\n    Maintained for backward compatibility.\n    \"\"\"\n    manager = ScreenBufferManager()\n    return manager.create_screen_renderable(screen_buffer)\nclass SessionCalculator:\n    \"\"\"Handles session-related calculations for display purposes.\n    (Moved from ui/calculators.py)\"\"\"\n    def __init__(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.display_controller",
        "documentation": {}
    },
    {
        "label": "HeaderManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "peekOfCode": "class HeaderManager:\n    \"\"\"Manager for header layout and formatting.\"\"\"\n    # Type constants for header configuration\n    DEFAULT_SEPARATOR_CHAR: Final[str] = \"=\"\n    DEFAULT_SEPARATOR_LENGTH: Final[int] = 60\n    DEFAULT_SPARKLES: Final[str] = \"✦ ✧ ✦ ✧\"\n    def __init__(self) -> None:\n        \"\"\"Initialize header manager.\"\"\"\n        self.separator_char: str = self.DEFAULT_SEPARATOR_CHAR\n        self.separator_length: int = self.DEFAULT_SEPARATOR_LENGTH",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ScreenManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "peekOfCode": "class ScreenManager:\n    \"\"\"Manager for overall screen layout and organization.\"\"\"\n    # Type constants for screen configuration\n    DEFAULT_SCREEN_WIDTH: Final[int] = 80\n    DEFAULT_SCREEN_HEIGHT: Final[int] = 24\n    DEFAULT_MARGIN: Final[int] = 0\n    def __init__(self) -> None:\n        \"\"\"Initialize screen manager.\"\"\"\n        self.screen_width: int = self.DEFAULT_SCREEN_WIDTH\n        self.screen_height: int = self.DEFAULT_SCREEN_HEIGHT",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "peekOfCode": "__all__ = [\"HeaderManager\", \"ScreenManager\"]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.layouts",
        "documentation": {}
    },
    {
        "label": "ModelStatsDict",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ModelStatsDict(TypedDict, total=False):\n    \"\"\"Type definition for model statistics dictionary.\"\"\"\n    input_tokens: int\n    output_tokens: int\n    total_tokens: int\n    cost: float\nclass ProgressBarStyleConfig(TypedDict, total=False):\n    \"\"\"Configuration for progress bar styling.\"\"\"\n    filled_char: str\n    empty_char: str",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ProgressBarStyleConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ProgressBarStyleConfig(TypedDict, total=False):\n    \"\"\"Configuration for progress bar styling.\"\"\"\n    filled_char: str\n    empty_char: str\n    filled_style: str | None\n    empty_style: str | None\nclass ThresholdConfig(TypedDict):\n    \"\"\"Configuration for color thresholds.\"\"\"\n    threshold: float\n    style: str",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ThresholdConfig",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ThresholdConfig(TypedDict):\n    \"\"\"Configuration for color thresholds.\"\"\"\n    threshold: float\n    style: str\nclass ProgressBarRenderer(Protocol):\n    \"\"\"Protocol for progress bar rendering.\"\"\"\n    def render(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Render the progress bar.\"\"\"\n        ...\nclass BaseProgressBar(ABC):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ProgressBarRenderer",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ProgressBarRenderer(Protocol):\n    \"\"\"Protocol for progress bar rendering.\"\"\"\n    def render(self, *args: Any, **kwargs: Any) -> str:\n        \"\"\"Render the progress bar.\"\"\"\n        ...\nclass BaseProgressBar(ABC):\n    \"\"\"Abstract base class for progress bar components.\"\"\"\n    # Type constants for validation\n    MIN_WIDTH: Final[int] = 10\n    MAX_WIDTH: Final[int] = 200",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "BaseProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class BaseProgressBar(ABC):\n    \"\"\"Abstract base class for progress bar components.\"\"\"\n    # Type constants for validation\n    MIN_WIDTH: Final[int] = 10\n    MAX_WIDTH: Final[int] = 200\n    DEFAULT_WIDTH: Final[int] = 50\n    # Default styling constants\n    DEFAULT_FILLED_CHAR: Final[str] = \"█\"\n    DEFAULT_EMPTY_CHAR: Final[str] = \"░\"\n    DEFAULT_MAX_PERCENTAGE: Final[float] = 100.0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TokenProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class TokenProgressBar(BaseProgressBar):\n    \"\"\"Token usage progress bar component.\"\"\"\n    # Color threshold constants\n    HIGH_USAGE_THRESHOLD: Final[float] = 90.0\n    MEDIUM_USAGE_THRESHOLD: Final[float] = 50.0\n    LOW_USAGE_THRESHOLD: Final[float] = 0.0\n    # Style constants\n    HIGH_USAGE_STYLE: Final[str] = \"cost.high\"\n    MEDIUM_USAGE_STYLE: Final[str] = \"cost.medium\"\n    LOW_USAGE_STYLE: Final[str] = \"cost.low\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "TimeProgressBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class TimeProgressBar(BaseProgressBar):\n    \"\"\"Time progress bar component for session duration.\"\"\"\n    def render(self, elapsed_minutes: float, total_minutes: float) -> str:\n        \"\"\"Render time progress bar.\n        Args:\n            elapsed_minutes: Minutes elapsed in session\n            total_minutes: Total session duration in minutes\n        Returns:\n            Formatted time progress bar string\n        \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "ModelUsageBar",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "peekOfCode": "class ModelUsageBar(BaseProgressBar):\n    \"\"\"Model usage progress bar showing Sonnet vs Opus distribution.\"\"\"\n    def render(self, per_model_stats: dict[str, Any]) -> str:\n        \"\"\"Render model usage progress bar.\n        Args:\n            per_model_stats: Dictionary of model statistics\n        Returns:\n            Formatted model usage bar string\n        \"\"\"\n        if not per_model_stats:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.progress_bars",
        "documentation": {}
    },
    {
        "label": "SessionDisplayData",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "peekOfCode": "class SessionDisplayData:\n    \"\"\"Data container for session display information.\n    This replaces the 21 parameters in format_active_session_screen method.\n    \"\"\"\n    plan: str\n    timezone: str\n    tokens_used: int\n    token_limit: int\n    usage_percentage: float\n    tokens_left: int",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "SessionDisplayComponent",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "peekOfCode": "class SessionDisplayComponent:\n    \"\"\"Main component for displaying active session information.\"\"\"\n    def __init__(self):\n        \"\"\"Initialize session display component with sub-components.\"\"\"\n        self.token_progress = TokenProgressBar()\n        self.time_progress = TimeProgressBar()\n        self.model_usage = ModelUsageBar()\n    def _render_wide_progress_bar(self, percentage: float) -> str:\n        \"\"\"Render a wide progress bar (50 chars) using centralized progress bar logic.\n        Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.session_display",
        "documentation": {}
    },
    {
        "label": "TableViewsController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "peekOfCode": "class TableViewsController:\n    \"\"\"Controller for table-based views (daily, monthly).\"\"\"\n    def __init__(self, console: Optional[Console] = None):\n        \"\"\"Initialize the table views controller.\n        Args:\n            console: Optional Console instance for rich output\n        \"\"\"\n        self.console = console\n        # Define simple styles\n        self.key_style = \"cyan\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "peekOfCode": "logger = logging.getLogger(__name__)\nclass TableViewsController:\n    \"\"\"Controller for table-based views (daily, monthly).\"\"\"\n    def __init__(self, console: Optional[Console] = None):\n        \"\"\"Initialize the table views controller.\n        Args:\n            console: Optional Console instance for rich output\n        \"\"\"\n        self.console = console\n        # Define simple styles",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.ui.table_views",
        "documentation": {}
    },
    {
        "label": "format_number",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "peekOfCode": "def format_number(value: Union[int, float], decimals: int = 0) -> str:\n    \"\"\"Format number with thousands separator.\n    Args:\n        value: Number to format\n        decimals: Number of decimal places (default: 0)\n    Returns:\n        Formatted number string with thousands separator\n    \"\"\"\n    if decimals > 0:\n        return f\"{value:,.{decimals}f}\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_currency",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "peekOfCode": "def format_currency(amount: float, currency: str = \"USD\") -> str:\n    \"\"\"Format currency amount with appropriate symbol and formatting.\n    Args:\n        amount: The amount to format\n        currency: Currency code (default: USD)\n    Returns:\n        Formatted currency string\n    \"\"\"\n    amount: float = round(amount, 2)\n    if currency == \"USD\":",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "peekOfCode": "def format_time(minutes: float) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\n    This is a re-export from time_utils for backward compatibility.\n    Args:\n        minutes: Duration in minutes\n    Returns:\n        Formatted time string\n    \"\"\"\n    from claude_monitor.utils.time_utils import format_time as _format_time\n    return _format_time(minutes)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "peekOfCode": "def format_display_time(\n    dt_obj: datetime,\n    use_12h_format: Optional[bool] = None,\n    include_seconds: bool = True,\n) -> str:\n    \"\"\"Format datetime for display with 12h/24h support.\n    This is a re-export from time_utils for backward compatibility.\n    Args:\n        dt_obj: Datetime object to format\n        use_12h_format: Whether to use 12-hour format (None for auto-detect)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef format_number(value: Union[int, float], decimals: int = 0) -> str:\n    \"\"\"Format number with thousands separator.\n    Args:\n        value: Number to format\n        decimals: Number of decimal places (default: 0)\n    Returns:\n        Formatted number string with thousands separator\n    \"\"\"\n    if decimals > 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.formatting",
        "documentation": {}
    },
    {
        "label": "normalize_model_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "peekOfCode": "def normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name to a standard format.\n    This function delegates to the implementation in core.models.\n    Args:\n        model: Model name to normalize\n    Returns:\n        Normalized model name\n    \"\"\"\n    from claude_monitor.core.models import normalize_model_name as _normalize_model_name\n    return _normalize_model_name(model)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "get_model_display_name",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "peekOfCode": "def get_model_display_name(model: str) -> str:\n    \"\"\"Get a display-friendly model name.\n    Args:\n        model: Model name to get display name for\n    Returns:\n        Display-friendly model name\n    \"\"\"\n    normalized: str = normalize_model_name(model)\n    display_names: Dict[str, str] = {\n        \"claude-3-opus\": \"Claude 3 Opus\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "is_claude_model",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "peekOfCode": "def is_claude_model(model: str) -> bool:\n    \"\"\"Check if a model is a Claude model.\n    Args:\n        model: Model name to check\n    Returns:\n        True if it's a Claude model, False otherwise\n    \"\"\"\n    normalized: str = normalize_model_name(model)\n    return normalized.startswith(\"claude-\")\ndef get_model_generation(model: str) -> str:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "get_model_generation",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "peekOfCode": "def get_model_generation(model: str) -> str:\n    \"\"\"Get the generation/version of a Claude model.\n    Args:\n        model: Model name\n    Returns:\n        Generation string (e.g., '3', '3.5') or 'unknown'\n    \"\"\"\n    if not model:\n        return \"unknown\"\n    model_lower: str = model.lower()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "peekOfCode": "logger = logging.getLogger(__name__)\ndef normalize_model_name(model: str) -> str:\n    \"\"\"Normalize model name to a standard format.\n    This function delegates to the implementation in core.models.\n    Args:\n        model: Model name to normalize\n    Returns:\n        Normalized model name\n    \"\"\"\n    from claude_monitor.core.models import normalize_model_name as _normalize_model_name",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.model_utils",
        "documentation": {}
    },
    {
        "label": "NotificationManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.notifications",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.notifications",
        "peekOfCode": "class NotificationManager:\n    \"\"\"Manages notification states and persistence.\"\"\"\n    def __init__(self, config_dir: Path) -> None:\n        self.notification_file: Path = config_dir / \"notification_states.json\"\n        self.states: Dict[str, Dict[str, Union[bool, Optional[datetime]]]] = (\n            self._load_states()\n        )\n        self.default_states: Dict[str, Dict[str, Union[bool, Optional[datetime]]]] = {\n            \"switch_to_custom\": {\"triggered\": False, \"timestamp\": None},\n            \"exceed_max_limit\": {\"triggered\": False, \"timestamp\": None},",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.notifications",
        "documentation": {}
    },
    {
        "label": "TimeFormatDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "class TimeFormatDetector:\n    \"\"\"Unified time format detection using multiple strategies.\"\"\"\n    TWELVE_HOUR_COUNTRIES: Set[str] = {\n        \"US\",\n        \"CA\",\n        \"AU\",\n        \"NZ\",\n        \"PH\",\n        \"IN\",\n        \"EG\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "SystemTimeDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "class SystemTimeDetector:\n    \"\"\"System timezone and time format detection.\"\"\"\n    @staticmethod\n    def get_timezone() -> str:\n        \"\"\"Detect system timezone.\"\"\"\n        tz: Optional[str] = os.environ.get(\"TZ\")\n        if tz:\n            return tz\n        system: str = platform.system()\n        if system == \"Darwin\":",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "TimezoneHandler",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "class TimezoneHandler:\n    \"\"\"Handles timezone conversions and timestamp parsing.\"\"\"\n    def __init__(self, default_tz: str = \"UTC\") -> None:\n        \"\"\"Initialize with a default timezone.\"\"\"\n        self.default_tz: BaseTzInfo = self._validate_and_get_tz(default_tz)\n    def _validate_and_get_tz(self, tz_name: str) -> BaseTzInfo:\n        \"\"\"Validate and return pytz timezone object.\"\"\"\n        try:\n            return pytz.timezone(tz_name)\n        except pytz.exceptions.UnknownTimeZoneError:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_time_format_preference",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_time_format_preference(args: Any = None) -> bool:\n    \"\"\"Get time format preference - returns True for 12h, False for 24h.\"\"\"\n    return TimeFormatDetector.get_preference(args)\ndef get_system_timezone() -> str:\n    \"\"\"Get system timezone.\"\"\"\n    return SystemTimeDetector.get_timezone()\ndef get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_system_timezone() -> str:\n    \"\"\"Get system timezone.\"\"\"\n    return SystemTimeDetector.get_timezone()\ndef get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "get_system_time_format",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def get_system_time_format() -> str:\n    \"\"\"Get system time format ('12h' or '24h').\"\"\"\n    return SystemTimeDetector.get_time_format()\ndef format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"\n    hours = int(minutes // 60)\n    mins = int(minutes % 60)\n    if mins == 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def format_time(minutes: Union[int, float]) -> str:\n    \"\"\"Format minutes into human-readable time (e.g., '3h 45m').\"\"\"\n    if minutes < 60:\n        return f\"{int(minutes)}m\"\n    hours = int(minutes // 60)\n    mins = int(minutes % 60)\n    if mins == 0:\n        return f\"{hours}h\"\n    return f\"{hours}h {mins}m\"\ndef percentage(part: float, whole: float, decimal_places: int = 1) -> float:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "percentage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def percentage(part: float, whole: float, decimal_places: int = 1) -> float:\n    \"\"\"Calculate percentage with safe division.\n    Args:\n        part: Part value\n        whole: Whole value\n        decimal_places: Number of decimal places to round to\n    Returns:\n        Percentage value\n    \"\"\"\n    if whole == 0:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "format_display_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "peekOfCode": "def format_display_time(\n    dt_obj: datetime,\n    use_12h_format: Optional[bool] = None,\n    include_seconds: bool = True,\n) -> str:\n    \"\"\"Central time formatting with 12h/24h support.\"\"\"\n    if use_12h_format is None:\n        use_12h_format = get_time_format_preference()\n    if use_12h_format:\n        if include_seconds:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.time_utils",
        "documentation": {}
    },
    {
        "label": "parse_timestamp",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "peekOfCode": "def parse_timestamp(timestamp_str: str, default_tz: str = \"UTC\") -> Optional[datetime]:\n    \"\"\"Parse timestamp string with timezone handling.\n    Args:\n        timestamp_str: Timestamp string to parse\n        default_tz: Default timezone if not specified in timestamp\n    Returns:\n        Parsed datetime object or None if parsing fails\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler(default_tz)\n    return handler.parse_timestamp(timestamp_str)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "ensure_utc",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "peekOfCode": "def ensure_utc(dt: datetime, default_tz: str = \"UTC\") -> datetime:\n    \"\"\"Convert datetime to UTC.\n    Args:\n        dt: Datetime object to convert\n        default_tz: Default timezone for naive datetime objects\n    Returns:\n        UTC datetime object\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler(default_tz)\n    return handler.ensure_utc(dt)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "validate_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "peekOfCode": "def validate_timezone(tz_name: str) -> bool:\n    \"\"\"Check if timezone name is valid.\n    Args:\n        tz_name: Timezone name to validate\n    Returns:\n        True if valid, False otherwise\n    \"\"\"\n    handler: TimezoneHandler = TimezoneHandler()\n    return handler.validate_timezone(tz_name)\ndef convert_to_timezone(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "convert_to_timezone",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "peekOfCode": "def convert_to_timezone(\n    dt: datetime, tz_name: str, default_tz: str = \"UTC\"\n) -> datetime:\n    \"\"\"Convert datetime to specific timezone.\n    Args:\n        dt: Datetime object to convert\n        tz_name: Target timezone name\n        default_tz: Default timezone for naive datetime objects\n    Returns:\n        Converted datetime object",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.utils.timezone",
        "documentation": {}
    },
    {
        "label": "get_version",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "peekOfCode": "def get_version() -> str:\n    \"\"\"Get version from package metadata.\n    This reads the version from the installed package metadata,\n    which is set from pyproject.toml during build/installation.\n    Returns:\n        Version string (e.g., \"3.0.0\")\n    \"\"\"\n    try:\n        return importlib.metadata.version(\"claude-monitor\")\n    except importlib.metadata.PackageNotFoundError:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "get_package_info",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "peekOfCode": "def get_package_info() -> Dict[str, Optional[str]]:\n    \"\"\"Get comprehensive package information.\n    Returns:\n        Dictionary containing version, name, and metadata\n    \"\"\"\n    try:\n        metadata = importlib.metadata.metadata(\"claude-monitor\")\n        return {\n            \"version\": get_version(),\n            \"name\": metadata.get(\"Name\"),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "get_version_info",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "peekOfCode": "def get_version_info() -> Dict[str, Any]:\n    \"\"\"Get detailed version and system information.\n    Returns:\n        Dictionary containing version, Python version, and system info\n    \"\"\"\n    return {\n        \"version\": get_version(),\n        \"python_version\": sys.version,\n        \"python_version_info\": {\n            \"major\": sys.version_info.major,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "find_project_root",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "peekOfCode": "def find_project_root(start_path: Optional[Union[str, Path]] = None) -> Optional[Path]:\n    \"\"\"Find the project root directory containing pyproject.toml.\n    Args:\n        start_path: Starting directory for search (defaults to current file location)\n    Returns:\n        Path to project root or None if not found\n    \"\"\"\n    if start_path is None:\n        current_dir = Path(__file__).parent\n    else:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor._version",
        "documentation": {}
    },
    {
        "label": "ErrorLevel",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "class ErrorLevel(str, Enum):\n    \"\"\"Error severity levels for logging.\"\"\"\n    INFO = \"info\"\n    ERROR = \"error\"\ndef report_error(\n    exception: Exception,\n    component: str,\n    context_name: Optional[str] = None,\n    context_data: Optional[Dict[str, Any]] = None,\n    tags: Optional[Dict[str, str]] = None,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "def report_error(\n    exception: Exception,\n    component: str,\n    context_name: Optional[str] = None,\n    context_data: Optional[Dict[str, Any]] = None,\n    tags: Optional[Dict[str, str]] = None,\n    level: ErrorLevel = ErrorLevel.ERROR,\n) -> None:\n    \"\"\"Report an exception with standardized logging and context.\n    Args:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_file_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "def report_file_error(\n    exception: Exception,\n    file_path: Union[str, Path],\n    operation: str = \"read\",\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report file-related errors with standardized context.\n    Args:\n        exception: The exception that occurred\n        file_path: Path to the file",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "get_error_context",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "def get_error_context() -> Dict[str, Any]:\n    \"\"\"Get standard error context information.\n    Returns:\n        Dictionary containing system and application context\n    \"\"\"\n    return {\n        \"python_version\": sys.version,\n        \"platform\": sys.platform,\n        \"cwd\": os.getcwd(),\n        \"pid\": os.getpid(),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_application_startup_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "def report_application_startup_error(\n    exception: Exception,\n    component: str = \"application_startup\",\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report application startup-related errors with system context.\n    Args:\n        exception: The startup exception\n        component: Component where startup failed\n        additional_context: Additional context data",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "report_configuration_error",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "peekOfCode": "def report_configuration_error(\n    exception: Exception,\n    config_file: Optional[Union[str, Path]] = None,\n    config_section: Optional[str] = None,\n    additional_context: Optional[Dict[str, Any]] = None,\n) -> None:\n    \"\"\"Report configuration-related errors.\n    Args:\n        exception: The configuration exception\n        config_file: Path to the configuration file",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.claude_monitor.error_handling",
        "documentation": {}
    },
    {
        "label": "analyze_usage_with_metadata",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def analyze_usage_with_metadata(\n    hours_back=96, use_cache=True, quick_start=False, data_path=None\n):\n    \"\"\"Enhanced analyze_usage with comprehensive metadata.\"\"\"\n    return analyze_usage(\n        hours_back=hours_back,\n        use_cache=use_cache,\n        quick_start=quick_start,\n        data_path=data_path,\n    )",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "analyze_usage_json",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def analyze_usage_json(hours_back=96, use_cache=True, data_path=None, indent=2):\n    \"\"\"Analyze usage and return JSON string.\"\"\"\n    result = analyze_usage(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path\n    )\n    return json.dumps(result, indent=indent, default=str)\ndef get_usage_summary(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Get high-level usage summary statistics.\"\"\"\n    result = analyze_usage(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "get_usage_summary",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def get_usage_summary(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Get high-level usage summary statistics.\"\"\"\n    result = analyze_usage(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path\n    )\n    blocks = result.get(\"blocks\", [])\n    return _create_summary_stats(blocks)\ndef print_usage_json(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Print usage analysis as JSON to stdout.\"\"\"\n    json_result = analyze_usage_json(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "print_usage_json",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def print_usage_json(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Print usage analysis as JSON to stdout.\"\"\"\n    json_result = analyze_usage_json(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path\n    )\n    print(json_result)\ndef print_usage_summary(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Print human-readable usage summary.\"\"\"\n    summary = get_usage_summary(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "print_usage_summary",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def print_usage_summary(hours_back=96, use_cache=True, data_path=None):\n    \"\"\"Print human-readable usage summary.\"\"\"\n    summary = get_usage_summary(\n        hours_back=hours_back, use_cache=use_cache, data_path=data_path\n    )\n    if summary.get(\"error\"):\n        print(f\"Error: {summary.get('error_details', 'Unknown error')}\")\n        return\n    print(f\"Claude Usage Summary (Last {hours_back} Hours)\")\n    print(\"=\" * 50)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_basic_usage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_basic_usage():\n    \"\"\"Example 1: Basic usage (backward compatibility with original API)\n    This example shows how to use the API in the same way as the original\n    usage_analyzer.api.analyze_usage() function.\n    \"\"\"\n    print(\"=== Example 1: Basic Usage ===\")\n    try:\n        # Simple usage - returns list of blocks just like the original\n        blocks = analyze_usage()\n        print(f\"Found {len(blocks)} session blocks\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_advanced_usage",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_advanced_usage():\n    \"\"\"Example 2: Advanced usage with metadata and time filtering\n    This example shows how to use the enhanced features of the new API\n    while maintaining backward compatibility.\n    \"\"\"\n    print(\"\\n=== Example 2: Advanced Usage ===\")\n    try:\n        # Get full results with metadata\n        result = analyze_usage_with_metadata(\n            hours_back=24,  # Only last 24 hours",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_json_output",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_json_output():\n    \"\"\"Example 3: JSON output (same as original API when used as script)\n    This example shows how to get JSON output exactly like the original API.\n    \"\"\"\n    print(\"\\n=== Example 3: JSON Output ===\")\n    try:\n        # Get JSON string (same format as original)\n        json_output = analyze_usage_json(hours_back=48)\n        # Parse it back to verify\n        blocks = json.loads(json_output)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_usage_summary",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_usage_summary():\n    \"\"\"Example 4: Usage summary and statistics\n    This example shows how to get high-level statistics about usage.\n    \"\"\"\n    print(\"\\n=== Example 4: Usage Summary ===\")\n    try:\n        # Get summary statistics\n        summary = get_usage_summary(hours_back=168)  # Last week\n        print(f\"Total Cost: ${summary['total_cost']:.2f}\")\n        print(f\"Total Tokens: {summary['total_tokens']:,}\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_custom_data_path",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_custom_data_path():\n    \"\"\"Example 5: Using custom data path\n    This example shows how to analyze data from a custom location.\n    \"\"\"\n    print(\"\\n=== Example 5: Custom Data Path ===\")\n    try:\n        # You can specify a custom path to Claude data\n        custom_path = \"/path/to/claude/data\"  # Replace with actual path\n        # This will use the custom path instead of default ~/.claude/projects\n        blocks = analyze_usage(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_direct_import",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_direct_import():\n    \"\"\"Example 6: Direct import from main module\n    This example shows how to import the function directly from the main module.\n    \"\"\"\n    print(\"\\n=== Example 6: Direct Import ===\")\n    try:\n        # You can import directly from claude_monitor module\n        blocks = analyze_usage_direct()\n        print(f\"Direct import worked! Found {len(blocks)} blocks\")\n    except Exception as e:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_error_handling",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_error_handling():\n    \"\"\"Example 7: Error handling patterns\n    This example shows how the API handles errors gracefully.\n    \"\"\"\n    print(\"\\n=== Example 7: Error Handling ===\")\n    try:\n        # This might fail if no data is available\n        blocks = analyze_usage(\n            data_path=\"/nonexistent/path\",\n            hours_back=1,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_print_functions",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_print_functions():\n    \"\"\"Example 8: Print functions for direct output\n    This example shows the convenience print functions.\n    \"\"\"\n    print(\"\\n=== Example 8: Print Functions ===\")\n    try:\n        # Print JSON directly (like original API as script)\n        print(\"JSON output:\")\n        print_usage_json(hours_back=24)\n        print(\"\\nSummary output:\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "example_compatibility_check",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def example_compatibility_check():\n    \"\"\"Example 9: Compatibility check with original API\n    This example shows how to verify the output is compatible with the original.\n    \"\"\"\n    print(\"\\n=== Example 9: Compatibility Check ===\")\n    try:\n        # Get data in original format\n        blocks = analyze_usage()\n        # Check structure matches original expectations\n        if blocks:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "run_all_examples",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "def run_all_examples():\n    \"\"\"Run all examples to demonstrate the API functionality.\"\"\"\n    print(\"Claude Monitor API Examples\")\n    print(\"=\" * 50)\n    examples = [\n        example_basic_usage,\n        example_advanced_usage,\n        example_json_output,\n        example_usage_summary,\n        example_custom_data_path,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "analyze_usage_direct",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "peekOfCode": "analyze_usage_direct = analyze_usage\ndef example_basic_usage():\n    \"\"\"Example 1: Basic usage (backward compatibility with original API)\n    This example shows how to use the API in the same way as the original\n    usage_analyzer.api.analyze_usage() function.\n    \"\"\"\n    print(\"=== Example 1: Basic Usage ===\")\n    try:\n        # Simple usage - returns list of blocks just like the original\n        blocks = analyze_usage()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.examples.api_examples",
        "documentation": {}
    },
    {
        "label": "mock_pricing_calculator",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_pricing_calculator() -> Mock:\n    \"\"\"Mock PricingCalculator for testing.\"\"\"\n    mock = Mock()\n    mock.calculate_cost_for_entry.return_value = 0.001\n    return mock\n@pytest.fixture\ndef mock_timezone_handler() -> Mock:\n    \"\"\"Mock TimezoneHandler for testing.\"\"\"\n    mock = Mock()\n    mock.parse_timestamp.return_value = datetime(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_timezone_handler",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_timezone_handler() -> Mock:\n    \"\"\"Mock TimezoneHandler for testing.\"\"\"\n    mock = Mock()\n    mock.parse_timestamp.return_value = datetime(\n        2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc\n    )\n    mock.ensure_utc.return_value = datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc)\n    return mock\n@pytest.fixture\ndef sample_usage_entry() -> UsageEntry:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_usage_entry",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_usage_entry() -> UsageEntry:\n    \"\"\"Sample UsageEntry for testing.\"\"\"\n    return UsageEntry(\n        timestamp=datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc),\n        input_tokens=100,\n        output_tokens=50,\n        cache_creation_tokens=10,\n        cache_read_tokens=5,\n        cost_usd=0.001,\n        model=\"claude-3-haiku\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_valid_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_valid_data() -> Dict[str, Any]:\n    \"\"\"Sample valid data structure for testing.\"\"\"\n    return {\n        \"timestamp\": \"2024-01-01T12:00:00Z\",\n        \"message\": {\n            \"id\": \"msg_123\",\n            \"model\": \"claude-3-haiku\",\n            \"usage\": {\n                \"input_tokens\": 100,\n                \"output_tokens\": 50,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_assistant_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_assistant_data() -> Dict[str, Any]:\n    \"\"\"Sample assistant-type data for testing.\"\"\"\n    return {\n        \"timestamp\": \"2024-01-01T12:00:00Z\",\n        \"type\": \"assistant\",\n        \"message\": {\n            \"id\": \"msg_123\",\n            \"model\": \"claude-3-haiku\",\n            \"usage\": {\n                \"input_tokens\": 100,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_user_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_user_data() -> Dict[str, Any]:\n    \"\"\"Sample user-type data for testing.\"\"\"\n    return {\n        \"timestamp\": \"2024-01-01T12:00:00Z\",\n        \"type\": \"user\",\n        \"usage\": {\n            \"input_tokens\": 200,\n            \"output_tokens\": 75,\n            \"cache_creation_input_tokens\": 0,\n            \"cache_read_input_tokens\": 0,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_malformed_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_malformed_data() -> Dict[str, Any]:\n    \"\"\"Sample malformed data for testing error handling.\"\"\"\n    return {\n        \"timestamp\": \"invalid_timestamp\",\n        \"message\": \"not_a_dict\",\n        \"usage\": {\"input_tokens\": \"not_a_number\", \"output_tokens\": None},\n    }\n@pytest.fixture\ndef sample_minimal_data() -> Dict[str, Any]:\n    \"\"\"Sample minimal valid data for testing.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_minimal_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_minimal_data() -> Dict[str, Any]:\n    \"\"\"Sample minimal valid data for testing.\"\"\"\n    return {\n        \"timestamp\": \"2024-01-01T12:00:00Z\",\n        \"usage\": {\"input_tokens\": 100, \"output_tokens\": 50},\n        \"request_id\": \"req_456\",\n    }\n@pytest.fixture\ndef sample_empty_tokens_data() -> Dict[str, Any]:\n    \"\"\"Sample data with empty/zero tokens for testing.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_empty_tokens_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_empty_tokens_data() -> Dict[str, Any]:\n    \"\"\"Sample data with empty/zero tokens for testing.\"\"\"\n    return {\n        \"timestamp\": \"2024-01-01T12:00:00Z\",\n        \"usage\": {\n            \"input_tokens\": 0,\n            \"output_tokens\": 0,\n            \"cache_creation_input_tokens\": 0,\n            \"cache_read_input_tokens\": 0,\n        },",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_duplicate_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_duplicate_data() -> List[Dict[str, Any]]:\n    \"\"\"Sample data for testing duplicate detection.\"\"\"\n    return [\n        {\n            \"timestamp\": \"2024-01-01T12:00:00Z\",\n            \"message_id\": \"msg_1\",\n            \"request_id\": \"req_1\",\n            \"usage\": {\"input_tokens\": 100, \"output_tokens\": 50},\n        },\n        {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "all_cost_modes",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def all_cost_modes() -> List[CostMode]:\n    \"\"\"All available cost modes for testing.\"\"\"\n    return [CostMode.AUTO]\n@pytest.fixture\ndef sample_cutoff_time() -> datetime:\n    \"\"\"Sample cutoff time for testing.\"\"\"\n    return datetime(2024, 1, 1, 10, 0, 0, tzinfo=timezone.utc)\n@pytest.fixture\ndef sample_processed_hashes() -> Set[str]:\n    \"\"\"Sample processed hashes set for testing.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_cutoff_time",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_cutoff_time() -> datetime:\n    \"\"\"Sample cutoff time for testing.\"\"\"\n    return datetime(2024, 1, 1, 10, 0, 0, tzinfo=timezone.utc)\n@pytest.fixture\ndef sample_processed_hashes() -> Set[str]:\n    \"\"\"Sample processed hashes set for testing.\"\"\"\n    return {\"msg_existing:req_existing\", \"msg_old:req_old\"}\n@pytest.fixture\ndef mock_file_reader() -> Mock:\n    \"\"\"Mock JsonlFileReader for testing.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_processed_hashes",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_processed_hashes() -> Set[str]:\n    \"\"\"Sample processed hashes set for testing.\"\"\"\n    return {\"msg_existing:req_existing\", \"msg_old:req_old\"}\n@pytest.fixture\ndef mock_file_reader() -> Mock:\n    \"\"\"Mock JsonlFileReader for testing.\"\"\"\n    mock = Mock()\n    mock.read_jsonl_file.return_value = [\n        {\n            \"timestamp\": \"2024-01-01T12:00:00Z\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_file_reader",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_file_reader() -> Mock:\n    \"\"\"Mock JsonlFileReader for testing.\"\"\"\n    mock = Mock()\n    mock.read_jsonl_file.return_value = [\n        {\n            \"timestamp\": \"2024-01-01T12:00:00Z\",\n            \"message_id\": \"msg_1\",\n            \"request_id\": \"req_1\",\n            \"usage\": {\"input_tokens\": 100, \"output_tokens\": 50},\n        }",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_data_filter",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_data_filter() -> Mock:\n    \"\"\"Mock DataFilter for testing.\"\"\"\n    mock = Mock()\n    mock.calculate_cutoff_time.return_value = datetime(\n        2024, 1, 1, 10, 0, 0, tzinfo=timezone.utc\n    )\n    mock.should_process_entry.return_value = True\n    mock.update_processed_hashes.return_value = None\n    return mock\n@pytest.fixture",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_usage_entry_mapper",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_usage_entry_mapper() -> Mock:\n    \"\"\"Mock UsageEntryMapper for testing.\"\"\"\n    mock = Mock()\n    mock.map.return_value = UsageEntry(\n        timestamp=datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc),\n        input_tokens=100,\n        output_tokens=50,\n        cache_creation_tokens=0,\n        cache_read_tokens=0,\n        cost_usd=0.001,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_data_processor",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_data_processor() -> Mock:\n    \"\"\"Mock DataProcessor for testing.\"\"\"\n    mock = Mock()\n    mock.process_files.return_value = (\n        [\n            UsageEntry(\n                timestamp=datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc),\n                input_tokens=100,\n                output_tokens=50,\n                cache_creation_tokens=0,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_data_manager",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_data_manager() -> Mock:\n    \"\"\"Mock DataManager for monitoring tests.\"\"\"\n    mock = Mock()\n    mock.get_data.return_value = {\n        \"blocks\": [\n            {\n                \"id\": \"session_1\",\n                \"isActive\": True,\n                \"totalTokens\": 1000,\n                \"costUSD\": 0.05,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_session_monitor",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_session_monitor() -> Mock:\n    \"\"\"Mock SessionMonitor for monitoring tests.\"\"\"\n    mock = Mock()\n    mock.update.return_value = (True, [])\n    mock.current_session_id = \"session_1\"\n    mock.session_count = 1\n    mock.session_history = [\n        {\n            \"id\": \"session_1\",\n            \"started_at\": \"2024-01-01T12:00:00Z\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_monitoring_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_monitoring_data() -> Dict[str, Any]:\n    \"\"\"Sample monitoring data structure for testing.\"\"\"\n    return {\n        \"blocks\": [\n            {\n                \"id\": \"session_1\",\n                \"isActive\": True,\n                \"totalTokens\": 1000,\n                \"costUSD\": 0.05,\n                \"startTime\": \"2024-01-01T12:00:00Z\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_session_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_session_data() -> Dict[str, Any]:\n    \"\"\"Sample session data for testing.\"\"\"\n    return {\n        \"id\": \"session_1\",\n        \"isActive\": True,\n        \"totalTokens\": 1000,\n        \"costUSD\": 0.05,\n        \"startTime\": \"2024-01-01T12:00:00Z\",\n    }\n@pytest.fixture",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "sample_invalid_monitoring_data",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def sample_invalid_monitoring_data() -> Dict[str, Any]:\n    \"\"\"Sample invalid monitoring data for testing.\"\"\"\n    return {\n        \"blocks\": [\n            {\n                \"id\": \"session_1\",\n                \"isActive\": \"not_boolean\",\n                \"totalTokens\": \"not_number\",\n                \"costUSD\": None,\n            }",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "mock_orchestrator_args",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "peekOfCode": "def mock_orchestrator_args() -> Mock:\n    \"\"\"Mock command line arguments for orchestrator testing.\"\"\"\n    args = Mock()\n    args.plan = \"pro\"\n    args.timezone = \"UTC\"\n    args.refresh_rate = 10\n    args.custom_limit_tokens = None\n    return args",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.conftest",
        "documentation": {}
    },
    {
        "label": "run_tests",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.run_tests",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.run_tests",
        "peekOfCode": "def run_tests() -> int:\n    \"\"\"Run all tests with pytest.\"\"\"\n    test_dir = Path(__file__).parent\n    src_dir = test_dir.parent.parent.parent\n    import os\n    env = os.environ.copy()\n    env[\"PYTHONPATH\"] = str(src_dir)\n    cmd: List[str] = [\n        sys.executable,\n        \"-m\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.run_tests",
        "documentation": {}
    },
    {
        "label": "TestAggregatedStats",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "peekOfCode": "class TestAggregatedStats:\n    \"\"\"Test cases for AggregatedStats dataclass.\"\"\"\n    def test_init_default_values(self) -> None:\n        \"\"\"Test default initialization of AggregatedStats.\"\"\"\n        stats = AggregatedStats()\n        assert stats.input_tokens == 0\n        assert stats.output_tokens == 0\n        assert stats.cache_creation_tokens == 0\n        assert stats.cache_read_tokens == 0\n        assert stats.cost == 0.0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "documentation": {}
    },
    {
        "label": "TestAggregatedPeriod",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "peekOfCode": "class TestAggregatedPeriod:\n    \"\"\"Test cases for AggregatedPeriod dataclass.\"\"\"\n    def test_init_default_values(self) -> None:\n        \"\"\"Test default initialization of AggregatedPeriod.\"\"\"\n        period = AggregatedPeriod(period_key=\"2024-01-01\")\n        assert period.period_key == \"2024-01-01\"\n        assert isinstance(period.stats, AggregatedStats)\n        assert period.stats.count == 0\n        assert len(period.models_used) == 0\n        assert len(period.model_breakdowns) == 0",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "documentation": {}
    },
    {
        "label": "TestUsageAggregator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "peekOfCode": "class TestUsageAggregator:\n    \"\"\"Test cases for UsageAggregator class.\"\"\"\n    @pytest.fixture\n    def aggregator(self, tmp_path) -> UsageAggregator:\n        \"\"\"Create a UsageAggregator instance.\"\"\"\n        return UsageAggregator(data_path=str(tmp_path))\n    @pytest.fixture\n    def sample_entries(self) -> List[UsageEntry]:\n        \"\"\"Create sample usage entries spanning multiple days and months.\"\"\"\n        entries = []",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_aggregator",
        "documentation": {}
    },
    {
        "label": "TestAnalyzeUsage",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "peekOfCode": "class TestAnalyzeUsage:\n    \"\"\"Test the main analyze_usage function.\"\"\"\n    @patch(\"claude_monitor.data.analysis.load_usage_entries\")\n    @patch(\"claude_monitor.data.analysis.SessionAnalyzer\")\n    @patch(\"claude_monitor.data.analysis.BurnRateCalculator\")\n    def test_analyze_usage_basic(\n        self, mock_calc_class: Mock, mock_analyzer_class: Mock, mock_load: Mock\n    ) -> None:\n        \"\"\"Test basic analyze_usage functionality.\"\"\"\n        sample_entry = UsageEntry(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "documentation": {}
    },
    {
        "label": "TestProcessBurnRates",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "peekOfCode": "class TestProcessBurnRates:\n    \"\"\"Test the _process_burn_rates function.\"\"\"\n    def test_process_burn_rates_active_block(self) -> None:\n        \"\"\"Test burn rate processing for active blocks.\"\"\"\n        active_block = SessionBlock(\n            id=\"active_block\",\n            start_time=datetime(2024, 1, 1, 12, 0, tzinfo=timezone.utc),\n            end_time=datetime(2024, 1, 1, 17, 0, tzinfo=timezone.utc),\n            is_active=True,\n            token_counts=TokenCounts(input_tokens=100, output_tokens=50),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "documentation": {}
    },
    {
        "label": "TestCreateResult",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "peekOfCode": "class TestCreateResult:\n    \"\"\"Test the _create_result function.\"\"\"\n    @patch(\"claude_monitor.data.analysis._convert_blocks_to_dict_format\")\n    def test_create_result_basic(self, mock_convert: Mock) -> None:\n        \"\"\"Test basic _create_result functionality.\"\"\"\n        # Create test blocks\n        block1 = Mock()\n        block1.total_tokens = 100\n        block1.cost_usd = 0.001\n        block2 = Mock()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "documentation": {}
    },
    {
        "label": "TestLimitFunctions",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "peekOfCode": "class TestLimitFunctions:\n    \"\"\"Test limit-related functions.\"\"\"\n    def test_is_limit_in_block_timerange_within_range(self) -> None:\n        \"\"\"Test _is_limit_in_block_timerange when limit is within block.\"\"\"\n        block = SessionBlock(\n            id=\"test_block\",\n            start_time=datetime(2024, 1, 1, 12, 0, tzinfo=timezone.utc),\n            end_time=datetime(2024, 1, 1, 17, 0, tzinfo=timezone.utc),\n        )\n        limit_info = {\"timestamp\": datetime(2024, 1, 1, 14, 0, tzinfo=timezone.utc)}",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "documentation": {}
    },
    {
        "label": "TestBlockConversion",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "peekOfCode": "class TestBlockConversion:\n    \"\"\"Test block conversion functions.\"\"\"\n    def test_format_block_entries(self) -> None:\n        \"\"\"Test _format_block_entries function.\"\"\"\n        entry1 = UsageEntry(\n            timestamp=datetime(2024, 1, 1, 12, 0, tzinfo=timezone.utc),\n            input_tokens=100,\n            output_tokens=50,\n            cache_creation_tokens=10,\n            cache_read_tokens=5,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_analysis",
        "documentation": {}
    },
    {
        "label": "TestBurnRateCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "peekOfCode": "class TestBurnRateCalculator:\n    \"\"\"Test cases for BurnRateCalculator.\"\"\"\n    @pytest.fixture\n    def calculator(self) -> BurnRateCalculator:\n        \"\"\"Create a BurnRateCalculator instance.\"\"\"\n        return BurnRateCalculator()\n    @pytest.fixture\n    def mock_active_block(self) -> Mock:\n        \"\"\"Create a mock active block for testing.\"\"\"\n        block = Mock()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "TestHourlyBurnRateCalculation",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "peekOfCode": "class TestHourlyBurnRateCalculation:\n    \"\"\"Test cases for hourly burn rate functions.\"\"\"\n    @pytest.fixture\n    def current_time(self) -> datetime:\n        \"\"\"Current time for testing.\"\"\"\n        return datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone.utc)\n    @pytest.fixture\n    def mock_blocks(self) -> List[Dict[str, Any]]:\n        \"\"\"Create mock blocks for testing.\"\"\"\n        block1 = {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "TestCalculationEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "peekOfCode": "class TestCalculationEdgeCases:\n    \"\"\"Test edge cases and error conditions.\"\"\"\n    def test_burn_rate_with_negative_duration(self) -> None:\n        \"\"\"Test burn rate calculation with negative duration.\"\"\"\n        calculator = BurnRateCalculator()\n        block = Mock()\n        block.is_active = True\n        block.duration_minutes = -5  # Negative duration\n        block.token_counts = TokenCounts(input_tokens=100, output_tokens=50)\n        block.cost_usd = 0.5",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "TestP90Calculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "peekOfCode": "class TestP90Calculator:\n    \"\"\"Test cases for P90Calculator.\"\"\"\n    def test_p90_config_creation(self) -> None:\n        \"\"\"Test P90Config dataclass creation.\"\"\"\n        from claude_monitor.core.p90_calculator import P90Config\n        config = P90Config(\n            common_limits=[10000, 50000, 100000],\n            limit_threshold=0.9,\n            default_min_limit=5000,\n            cache_ttl_seconds=300,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_calculations",
        "documentation": {}
    },
    {
        "label": "TestMain",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "peekOfCode": "class TestMain:\n    \"\"\"Test cases for main function.\"\"\"\n    def test_version_flag(self) -> None:\n        \"\"\"Test --version flag returns 0 and prints version.\"\"\"\n        with patch(\"builtins.print\") as mock_print:\n            result = main([\"--version\"])\n            assert result == 0\n            mock_print.assert_called_once()\n            assert \"claude-monitor\" in mock_print.call_args[0][0]\n    def test_v_flag(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "documentation": {}
    },
    {
        "label": "TestFunctions",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "peekOfCode": "class TestFunctions:\n    \"\"\"Test module functions.\"\"\"\n    def test_get_standard_claude_paths(self) -> None:\n        \"\"\"Test getting standard Claude paths.\"\"\"\n        from claude_monitor.cli.main import get_standard_claude_paths\n        paths = get_standard_claude_paths()\n        assert isinstance(paths, list)\n        assert len(paths) > 0\n        assert \"~/.claude/projects\" in paths\n    def test_discover_claude_data_paths_no_paths(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_cli_main",
        "documentation": {}
    },
    {
        "label": "TestLoadUsageEntries",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestLoadUsageEntries:\n    \"\"\"Test the main load_usage_entries function.\"\"\"\n    @patch(\"claude_monitor.data.reader._find_jsonl_files\")\n    @patch(\"claude_monitor.data.reader._process_single_file\")\n    def test_load_usage_entries_basic(\n        self, mock_process_file: Mock, mock_find_files: Mock\n    ) -> None:\n        mock_find_files.return_value = [\n            Path(\"/test/file1.jsonl\"),\n            Path(\"/test/file2.jsonl\"),",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestLoadAllRawEntries",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestLoadAllRawEntries:\n    \"\"\"Test the load_all_raw_entries function.\"\"\"\n    @patch(\"claude_monitor.data.reader._find_jsonl_files\")\n    def test_load_all_raw_entries_basic(self, mock_find_files: Mock) -> None:\n        test_file = Path(\"/test/file.jsonl\")\n        mock_find_files.return_value = [test_file]\n        raw_data = [\n            {\"type\": \"user\", \"content\": \"Hello\"},\n            {\"type\": \"assistant\", \"content\": \"Hi there\"},\n        ]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestFindJsonlFiles",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestFindJsonlFiles:\n    \"\"\"Test the _find_jsonl_files function.\"\"\"\n    def test_find_jsonl_files_nonexistent_path(self) -> None:\n        with patch(\"claude_monitor.data.reader.logger\") as mock_logger:\n            result = _find_jsonl_files(Path(\"/nonexistent/path\"))\n        assert result == []\n        mock_logger.warning.assert_called()\n    def test_find_jsonl_files_existing_path(self) -> None:\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_path = Path(temp_dir)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestProcessSingleFile",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestProcessSingleFile:\n    \"\"\"Test the _process_single_file function.\"\"\"\n    @pytest.fixture\n    def mock_components(self) -> Tuple[Mock, Mock]:\n        timezone_handler = Mock(spec=TimezoneHandler)\n        pricing_calculator = Mock(spec=PricingCalculator)\n        return timezone_handler, pricing_calculator\n    def test_process_single_file_valid_data(\n        self, mock_components: Tuple[Mock, Mock]\n    ) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestShouldProcessEntry",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestShouldProcessEntry:\n    \"\"\"Test the _should_process_entry function.\"\"\"\n    @pytest.fixture\n    def timezone_handler(self) -> Mock:\n        return Mock(spec=TimezoneHandler)\n    def test_should_process_entry_no_cutoff_no_hash(\n        self, timezone_handler: Mock\n    ) -> None:\n        data = {\"timestamp\": \"2024-01-01T12:00:00Z\", \"message_id\": \"msg_1\"}\n        with patch(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestCreateUniqueHash",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestCreateUniqueHash:\n    \"\"\"Test the _create_unique_hash function.\"\"\"\n    def test_create_unique_hash_with_message_id_and_request_id(self) -> None:\n        data = {\"message_id\": \"msg_123\", \"request_id\": \"req_456\"}\n        result = _create_unique_hash(data)\n        assert result == \"msg_123:req_456\"\n    def test_create_unique_hash_with_nested_message_id(self) -> None:\n        data = {\"message\": {\"id\": \"msg_123\"}, \"requestId\": \"req_456\"}\n        result = _create_unique_hash(data)\n        assert result == \"msg_123:req_456\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestUpdateProcessedHashes",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestUpdateProcessedHashes:\n    \"\"\"Test the _update_processed_hashes function.\"\"\"\n    def test_update_processed_hashes_valid_hash(self) -> None:\n        data = {\"message_id\": \"msg_123\", \"request_id\": \"req_456\"}\n        processed_hashes = set()\n        with patch(\n            \"claude_monitor.data.reader._create_unique_hash\",\n            return_value=\"msg_123:req_456\",\n        ):\n            _update_processed_hashes(data, processed_hashes)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestMapToUsageEntry",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestMapToUsageEntry:\n    \"\"\"Test the _map_to_usage_entry function.\"\"\"\n    @pytest.fixture\n    def mock_components(self) -> Tuple[Mock, Mock]:\n        timezone_handler = Mock(spec=TimezoneHandler)\n        pricing_calculator = Mock(spec=PricingCalculator)\n        return timezone_handler, pricing_calculator\n    def test_map_to_usage_entry_valid_data(\n        self, mock_components: Tuple[Mock, Mock]\n    ) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestIntegration",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestIntegration:\n    \"\"\"Integration tests for data reader functionality.\"\"\"\n    def test_full_workflow_integration(self) -> None:\n        \"\"\"Test full workflow from file loading to entry creation.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_path = Path(temp_dir)\n            # Create test JSONL file\n            test_file = temp_path / \"test.jsonl\"\n            test_data = [\n                {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestPerformanceAndEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestPerformanceAndEdgeCases:\n    \"\"\"Test performance scenarios and edge cases.\"\"\"\n    def test_large_file_processing(self) -> None:\n        \"\"\"Test processing of large files.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_path = Path(temp_dir)\n            test_file = temp_path / \"large.jsonl\"\n            # Create a file with many entries\n            with open(test_file, \"w\") as f:\n                for i in range(1000):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestUsageEntryMapper",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestUsageEntryMapper:\n    \"\"\"Test the UsageEntryMapper compatibility wrapper.\"\"\"\n    @pytest.fixture\n    def mapper_components(self) -> Tuple[Any, Mock, Mock]:\n        \"\"\"Setup mapper components.\"\"\"\n        timezone_handler = Mock(spec=TimezoneHandler)\n        pricing_calculator = Mock(spec=PricingCalculator)\n        # Import after mocking to avoid import issues\n        from claude_monitor.data.reader import UsageEntryMapper\n        mapper = UsageEntryMapper(pricing_calculator, timezone_handler)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestAdditionalEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestAdditionalEdgeCases:\n    \"\"\"Test additional edge cases and error scenarios.\"\"\"\n    def test_create_unique_hash_edge_cases(self):\n        \"\"\"Test _create_unique_hash with various edge cases.\"\"\"\n        # Test with None values\n        data = {\"message_id\": None, \"request_id\": \"req_1\"}\n        result = _create_unique_hash(data)\n        assert result is None\n        # Test with empty strings\n        data = {\"message_id\": \"\", \"request_id\": \"req_1\"}",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestDataProcessors",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "peekOfCode": "class TestDataProcessors:\n    \"\"\"Test the data processor classes.\"\"\"\n    def test_timestamp_processor_init(self):\n        \"\"\"Test TimestampProcessor initialization.\"\"\"\n        from claude_monitor.core.data_processors import TimestampProcessor\n        # Test with default timezone handler\n        processor = TimestampProcessor()\n        assert processor.timezone_handler is not None\n        # Test with custom timezone handler\n        custom_handler = Mock()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_data_reader",
        "documentation": {}
    },
    {
        "label": "TestDisplayController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestDisplayController:\n    \"\"\"Test cases for DisplayController class.\"\"\"\n    @pytest.fixture\n    def controller(self) -> Any:\n        with patch(\"claude_monitor.ui.display_controller.NotificationManager\"):\n            return DisplayController()\n    @pytest.fixture\n    def sample_active_block(self) -> Dict[str, Any]:\n        \"\"\"Sample active block data.\"\"\"\n        return {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestLiveDisplayManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestLiveDisplayManager:\n    \"\"\"Test cases for LiveDisplayManager class.\"\"\"\n    def test_init_default(self):\n        \"\"\"Test LiveDisplayManager initialization with defaults.\"\"\"\n        manager = LiveDisplayManager()\n        assert manager._console is None\n        assert manager._live_context is None\n        assert manager._current_renderable is None\n    def test_init_with_console(self):\n        \"\"\"Test LiveDisplayManager initialization with console.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestScreenBufferManager",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestScreenBufferManager:\n    \"\"\"Test cases for ScreenBufferManager class.\"\"\"\n    def test_init(self):\n        \"\"\"Test ScreenBufferManager initialization.\"\"\"\n        manager = ScreenBufferManager()\n        assert manager.console is None\n    @patch(\"claude_monitor.terminal.themes.get_themed_console\")\n    @patch(\"claude_monitor.ui.display_controller.Text\")\n    @patch(\"claude_monitor.ui.display_controller.Group\")\n    def test_create_screen_renderable(self, mock_group, mock_text, mock_get_console):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestDisplayControllerEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestDisplayControllerEdgeCases:\n    \"\"\"Test edge cases for DisplayController.\"\"\"\n    @pytest.fixture\n    def controller(self):\n        \"\"\"Create a DisplayController instance.\"\"\"\n        with patch(\"claude_monitor.ui.display_controller.NotificationManager\"):\n            return DisplayController()\n    @pytest.fixture\n    def sample_args(self):\n        \"\"\"Sample CLI arguments.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestDisplayControllerAdvanced",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestDisplayControllerAdvanced:\n    \"\"\"Advanced test cases for DisplayController to improve coverage.\"\"\"\n    @pytest.fixture\n    def controller(self):\n        \"\"\"Create a DisplayController instance.\"\"\"\n        with patch(\"claude_monitor.ui.display_controller.NotificationManager\"):\n            return DisplayController()\n    @pytest.fixture\n    def sample_args_custom(self):\n        \"\"\"Sample CLI arguments for custom plan.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestSessionCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "class TestSessionCalculator:\n    \"\"\"Test cases for SessionCalculator class.\"\"\"\n    @pytest.fixture\n    def calculator(self):\n        \"\"\"Create a SessionCalculator instance.\"\"\"\n        return SessionCalculator()\n    def test_init(self, calculator):\n        \"\"\"Test SessionCalculator initialization.\"\"\"\n        assert calculator.tz_handler is not None\n    def test_calculate_time_data_with_start_end(self, calculator):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "test_create_screen_renderable_legacy",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "peekOfCode": "def test_create_screen_renderable_legacy(mock_manager_class):\n    \"\"\"Test the legacy create_screen_renderable function.\"\"\"\n    mock_manager = Mock()\n    mock_manager_class.return_value = mock_manager\n    mock_manager.create_screen_renderable.return_value = \"rendered\"\n    from claude_monitor.ui.display_controller import create_screen_renderable\n    screen_buffer = [\"line1\", \"line2\"]\n    result = create_screen_renderable(screen_buffer)\n    assert result == \"rendered\"\n    mock_manager_class.assert_called_once()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_display_controller",
        "documentation": {}
    },
    {
        "label": "TestErrorLevel",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "peekOfCode": "class TestErrorLevel:\n    \"\"\"Test cases for ErrorLevel enum.\"\"\"\n    def test_error_level_values(self) -> None:\n        \"\"\"Test that ErrorLevel has correct values.\"\"\"\n        assert ErrorLevel.INFO == \"info\"\n        assert ErrorLevel.ERROR == \"error\"\n    def test_error_level_string_conversion(self) -> None:\n        \"\"\"Test ErrorLevel string conversion.\"\"\"\n        assert ErrorLevel.INFO.value == \"info\"\n        assert ErrorLevel.ERROR.value == \"error\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "documentation": {}
    },
    {
        "label": "TestReportError",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "peekOfCode": "class TestReportError:\n    \"\"\"Test cases for report_error function.\"\"\"\n    @pytest.fixture\n    def sample_exception(self) -> ValueError:\n        \"\"\"Create a sample exception for testing.\"\"\"\n        try:\n            raise ValueError(\"Test error message\")\n        except ValueError as e:\n            return e\n    @pytest.fixture",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "documentation": {}
    },
    {
        "label": "TestErrorHandlingEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "peekOfCode": "class TestErrorHandlingEdgeCases:\n    \"\"\"Test edge cases for error handling module.\"\"\"\n    def test_error_level_equality(self) -> None:\n        \"\"\"Test ErrorLevel equality comparisons.\"\"\"\n        assert ErrorLevel.INFO == \"info\"\n        assert ErrorLevel.ERROR == \"error\"\n        assert ErrorLevel.INFO != ErrorLevel.ERROR\n    def test_error_level_in_list(self) -> None:\n        \"\"\"Test ErrorLevel can be used in lists and comparisons.\"\"\"\n        levels = [ErrorLevel.INFO, ErrorLevel.ERROR]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_error_handling",
        "documentation": {}
    },
    {
        "label": "TestFormatTime",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormatTime:\n    \"\"\"Test cases for format_time function.\"\"\"\n    def test_format_time_less_than_hour(self) -> None:\n        \"\"\"Test formatting minutes less than an hour.\"\"\"\n        assert format_time(0) == \"0m\"\n        assert format_time(1) == \"1m\"\n        assert format_time(30) == \"30m\"\n        assert format_time(59) == \"59m\"\n    def test_format_time_exact_hours(self) -> None:\n        \"\"\"Test formatting exact hours (no minutes).\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestFormatCurrency",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormatCurrency:\n    \"\"\"Test cases for format_currency function.\"\"\"\n    def test_format_usd_default(self) -> None:\n        \"\"\"Test formatting USD currency (default).\"\"\"\n        assert format_currency(0.0) == \"$0.00\"\n        assert format_currency(1.0) == \"$1.00\"\n        assert format_currency(10.99) == \"$10.99\"\n        assert format_currency(1000.0) == \"$1,000.00\"\n        assert format_currency(1234567.89) == \"$1,234,567.89\"\n    def test_format_usd_explicit(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestGetTimeFormatPreference",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestGetTimeFormatPreference:\n    \"\"\"Test cases for get_time_format_preference function.\"\"\"\n    @patch(\"claude_monitor.utils.time_utils.TimeFormatDetector.get_preference\")\n    def test_get_time_format_preference_no_args(self, mock_get_pref: Mock) -> None:\n        \"\"\"Test getting time format preference without args.\"\"\"\n        mock_get_pref.return_value = True\n        result = get_time_format_preference()\n        mock_get_pref.assert_called_once_with(None)\n        assert result is True\n    @patch(\"claude_monitor.utils.time_utils.TimeFormatDetector.get_preference\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestFormatDisplayTime",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormatDisplayTime:\n    \"\"\"Test cases for format_display_time function.\"\"\"\n    def setUp(self) -> None:\n        \"\"\"Set up test datetime.\"\"\"\n        self.test_dt = datetime(2024, 1, 1, 15, 30, 45, tzinfo=timezone.utc)\n    @patch(\"claude_monitor.utils.time_utils.get_time_format_preference\")\n    def test_format_display_time_24h_with_seconds(self, mock_pref: Mock) -> None:\n        \"\"\"Test 24-hour format with seconds.\"\"\"\n        mock_pref.return_value = False\n        dt = datetime(2024, 1, 1, 15, 30, 45, tzinfo=timezone.utc)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestFormattingAdvanced",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormattingAdvanced:\n    \"\"\"Advanced test cases for formatting utilities.\"\"\"\n    def test_format_currency_extensive_edge_cases(self) -> None:\n        \"\"\"Test format_currency with extensive edge cases.\"\"\"\n        # Test very small amounts\n        assert format_currency(0.001, \"USD\") == \"$0.00\"\n        assert format_currency(0.009, \"USD\") == \"$0.01\"\n        # Test negative amounts\n        assert format_currency(-10.50, \"USD\") == \"$-10.50\"\n        assert format_currency(-0.01, \"USD\") == \"$-0.01\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestFormattingErrorHandling",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormattingErrorHandling:\n    \"\"\"Test error handling in formatting utilities.\"\"\"\n    def test_format_currency_error_conditions(self) -> None:\n        \"\"\"Test format_currency error handling.\"\"\"\n        # Test with very large numbers that might cause overflow\n        try:\n            result = format_currency(float(\"inf\"), \"USD\")\n            # If it doesn't raise an error, should return a string\n            assert isinstance(result, str)\n        except (OverflowError, ValueError):",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestFormattingPerformance",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestFormattingPerformance:\n    \"\"\"Test performance characteristics of formatting utilities.\"\"\"\n    def test_format_currency_performance_with_large_datasets(self) -> None:\n        \"\"\"Test format_currency performance with many values.\"\"\"\n        import time\n        # Test formatting many currency values\n        values = [i * 0.01 for i in range(10000)]  # 0.00 to 99.99\n        start_time = time.time()\n        results = [format_currency(value, \"USD\") for value in values]\n        end_time = time.time()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestModelUtils",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "peekOfCode": "class TestModelUtils:\n    \"\"\"Test cases for model utilities.\"\"\"\n    def test_normalize_model_name(self) -> None:\n        \"\"\"Test model name normalization.\"\"\"\n        # Test Claude 3 models\n        assert normalize_model_name(\"claude-3-opus-20240229\") == \"claude-3-opus\"\n        assert normalize_model_name(\"claude-3-sonnet-20240229\") == \"claude-3-sonnet\"\n        assert normalize_model_name(\"claude-3-haiku-20240307\") == \"claude-3-haiku\"\n        # Test Claude 3.5 models\n        assert normalize_model_name(\"claude-3-5-sonnet-20241022\") == \"claude-3-5-sonnet\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_formatting",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorInit",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorInit:\n    \"\"\"Test orchestrator initialization.\"\"\"\n    def test_init_with_defaults(self) -> None:\n        \"\"\"Test initialization with default parameters.\"\"\"\n        with (\n            patch(\"claude_monitor.monitoring.orchestrator.DataManager\") as mock_dm,\n            patch(\"claude_monitor.monitoring.orchestrator.SessionMonitor\") as mock_sm,\n        ):\n            orchestrator = MonitoringOrchestrator()\n            assert orchestrator.update_interval == 10",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorLifecycle",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorLifecycle:\n    \"\"\"Test orchestrator start/stop lifecycle.\"\"\"\n    def test_start_monitoring(self, orchestrator: MonitoringOrchestrator) -> None:\n        \"\"\"Test starting monitoring creates thread.\"\"\"\n        assert not orchestrator._monitoring\n        orchestrator.start()\n        assert orchestrator._monitoring\n        assert orchestrator._monitor_thread is not None\n        assert orchestrator._monitor_thread.is_alive()\n        assert orchestrator._monitor_thread.name == \"MonitoringThread\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorCallbacks",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorCallbacks:\n    \"\"\"Test callback registration and handling.\"\"\"\n    def test_register_update_callback(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test registering update callback.\"\"\"\n        callback = Mock()\n        orchestrator.register_update_callback(callback)\n        assert callback in orchestrator._update_callbacks\n    def test_register_duplicate_callback(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorDataProcessing",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorDataProcessing:\n    \"\"\"Test data fetching and processing.\"\"\"\n    def test_force_refresh(self, orchestrator: MonitoringOrchestrator) -> None:\n        \"\"\"Test force refresh calls data manager.\"\"\"\n        expected_data: Dict[str, List[Dict[str, str]]] = {\"blocks\": [{\"id\": \"test\"}]}\n        orchestrator.data_manager.get_data.return_value = expected_data\n        result = orchestrator.force_refresh()\n        assert result is not None\n        assert \"data\" in result\n        assert result[\"data\"] == expected_data",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorMonitoringLoop",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorMonitoringLoop:\n    \"\"\"Test the monitoring loop behavior.\"\"\"\n    def test_monitoring_loop_initial_fetch(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test monitoring loop performs initial fetch.\"\"\"\n        with patch.object(orchestrator, \"_fetch_and_process_data\") as mock_fetch:\n            mock_fetch.return_value = {\"test\": \"data\"}\n            # Start and quickly stop to test initial fetch\n            orchestrator.start()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorFetchAndProcess",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorFetchAndProcess:\n    \"\"\"Test data fetching and processing logic.\"\"\"\n    def test_fetch_and_process_success(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test successful data fetch and processing.\"\"\"\n        test_data: Dict[str, List[Dict[str, Union[str, bool, int, float]]]] = {\n            \"blocks\": [\n                {\n                    \"id\": \"session_1\",",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorTokenLimitCalculation",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorTokenLimitCalculation:\n    \"\"\"Test token limit calculation logic.\"\"\"\n    def test_calculate_token_limit_no_args(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test token limit calculation without args.\"\"\"\n        data: Dict[str, List[Any]] = {\"blocks\": []}\n        result = orchestrator._calculate_token_limit(data)\n        assert result == DEFAULT_TOKEN_LIMIT\n    def test_calculate_token_limit_pro_plan(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorIntegration",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorIntegration:\n    \"\"\"Test integration scenarios.\"\"\"\n    def test_full_monitoring_cycle(self, orchestrator: MonitoringOrchestrator) -> None:\n        \"\"\"Test complete monitoring cycle.\"\"\"\n        # Setup test data\n        test_data: Dict[str, List[Dict[str, Union[str, bool, int, float]]]] = {\n            \"blocks\": [\n                {\n                    \"id\": \"session_1\",\n                    \"isActive\": True,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorThreadSafety",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorThreadSafety:\n    \"\"\"Test thread safety of orchestrator.\"\"\"\n    def test_concurrent_callback_registration(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test thread-safe callback registration.\"\"\"\n        callbacks: List[Mock] = []\n        def register_callbacks() -> None:\n            for i in range(10):\n                callback = Mock()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestMonitoringOrchestratorProperties",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestMonitoringOrchestratorProperties:\n    \"\"\"Test orchestrator properties and state.\"\"\"\n    def test_last_valid_data_property(\n        self, orchestrator: MonitoringOrchestrator\n    ) -> None:\n        \"\"\"Test last valid data is stored correctly.\"\"\"\n        test_data: Dict[str, List[Dict[str, Union[str, bool, int, float]]]] = {\n            \"blocks\": [\n                {\"id\": \"test\", \"isActive\": True, \"totalTokens\": 100, \"costUSD\": 0.01}\n            ]",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestSessionMonitor",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "class TestSessionMonitor:\n    \"\"\"Test session monitoring functionality.\"\"\"\n    def test_session_monitor_init(self) -> None:\n        \"\"\"Test SessionMonitor initialization.\"\"\"\n        from claude_monitor.monitoring.session_monitor import SessionMonitor\n        monitor = SessionMonitor()\n        assert monitor._current_session_id is None\n        assert monitor._session_callbacks == []\n        assert monitor._session_history == []\n    def test_session_monitor_update_valid_data(self) -> None:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "mock_data_manager",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "def mock_data_manager() -> Mock:\n    \"\"\"Mock DataManager for testing.\"\"\"\n    mock = Mock()\n    mock.get_data.return_value = {\n        \"blocks\": [\n            {\n                \"id\": \"session_1\",\n                \"isActive\": True,\n                \"totalTokens\": 1000,\n                \"costUSD\": 0.05,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "mock_session_monitor",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "def mock_session_monitor() -> Mock:\n    \"\"\"Mock SessionMonitor for testing.\"\"\"\n    mock = Mock()\n    mock.update.return_value = (True, [])  # (is_valid, errors)\n    mock.current_session_id = \"session_1\"\n    mock.session_count = 1\n    return mock\n@pytest.fixture\ndef orchestrator(\n    mock_data_manager: Mock, mock_session_monitor: Mock",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "orchestrator",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "peekOfCode": "def orchestrator(\n    mock_data_manager: Mock, mock_session_monitor: Mock\n) -> MonitoringOrchestrator:\n    \"\"\"Create orchestrator with mocked dependencies.\"\"\"\n    with (\n        patch(\n            \"claude_monitor.monitoring.orchestrator.DataManager\",\n            return_value=mock_data_manager,\n        ),\n        patch(",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_monitoring_orchestrator",
        "documentation": {}
    },
    {
        "label": "TestPricingCalculator",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_pricing",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_pricing",
        "peekOfCode": "class TestPricingCalculator:\n    \"\"\"Test suite for PricingCalculator class.\"\"\"\n    @pytest.fixture\n    def calculator(self) -> PricingCalculator:\n        \"\"\"Create a PricingCalculator with default pricing.\"\"\"\n        return PricingCalculator()\n    @pytest.fixture\n    def custom_pricing(self) -> Dict[str, Dict[str, float]]:\n        \"\"\"Custom pricing configuration for testing.\"\"\"\n        return {",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_pricing",
        "documentation": {}
    },
    {
        "label": "TestSessionAnalyzer",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "peekOfCode": "class TestSessionAnalyzer:\n    \"\"\"Test the SessionAnalyzer class.\"\"\"\n    def test_session_analyzer_init(self) -> None:\n        \"\"\"Test SessionAnalyzer initialization.\"\"\"\n        analyzer = SessionAnalyzer()\n        assert analyzer.session_duration_hours == 5\n        assert analyzer.session_duration == timedelta(hours=5)\n        assert analyzer.timezone_handler is not None\n    def test_session_analyzer_init_custom_duration(self) -> None:\n        \"\"\"Test SessionAnalyzer with custom duration.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "documentation": {}
    },
    {
        "label": "TestSessionAnalyzerIntegration",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "peekOfCode": "class TestSessionAnalyzerIntegration:\n    \"\"\"Integration tests for SessionAnalyzer.\"\"\"\n    def test_full_analysis_workflow(self) -> None:\n        \"\"\"Test complete analysis workflow.\"\"\"\n        analyzer = SessionAnalyzer()\n        # Create realistic usage entries\n        base_time = datetime(2024, 1, 1, 12, 0, tzinfo=timezone.utc)\n        entries: List[UsageEntry] = [\n            UsageEntry(\n                timestamp=base_time,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "documentation": {}
    },
    {
        "label": "TestSessionAnalyzerEdgeCases",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "peekOfCode": "class TestSessionAnalyzerEdgeCases:\n    \"\"\"Test edge cases and error conditions.\"\"\"\n    def test_malformed_entry_handling(self) -> None:\n        \"\"\"Test handling of malformed entries.\"\"\"\n        analyzer = SessionAnalyzer()\n        # Entry with None timestamp should be handled gracefully\n        entry = UsageEntry(\n            timestamp=datetime(2024, 1, 1, 12, 0, tzinfo=timezone.utc),\n            input_tokens=100,\n            output_tokens=50,",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_session_analyzer",
        "documentation": {}
    },
    {
        "label": "TestLastUsedParams",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "peekOfCode": "class TestLastUsedParams:\n    \"\"\"Test suite for LastUsedParams class.\"\"\"\n    def setup_method(self) -> None:\n        \"\"\"Set up test environment.\"\"\"\n        self.temp_dir = Path(tempfile.mkdtemp())\n        self.last_used = LastUsedParams(self.temp_dir)\n    def teardown_method(self) -> None:\n        \"\"\"Clean up test environment.\"\"\"\n        import shutil\n        shutil.rmtree(self.temp_dir, ignore_errors=True)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "TestSettings",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "peekOfCode": "class TestSettings:\n    \"\"\"Test suite for Settings class.\"\"\"\n    def test_default_values(self) -> None:\n        \"\"\"Test default settings values.\"\"\"\n        settings = Settings(_cli_parse_args=[])\n        assert settings.plan == \"custom\"\n        assert settings.timezone == \"auto\"\n        assert settings.time_format == \"auto\"\n        assert settings.theme == \"auto\"\n        assert settings.custom_limit_tokens is None",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "TestSettingsIntegration",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "peekOfCode": "class TestSettingsIntegration:\n    \"\"\"Integration tests for Settings class.\"\"\"\n    def test_complete_workflow(self) -> None:\n        \"\"\"Test complete workflow with real file operations.\"\"\"\n        with tempfile.TemporaryDirectory() as temp_dir:\n            config_dir = Path(temp_dir)\n            # Mock the config directory\n            with patch(\"claude_monitor.core.settings.LastUsedParams\") as MockLastUsed:\n                # Create real LastUsedParams instance with temp directory\n                real_last_used = LastUsedParams(config_dir)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_settings",
        "documentation": {}
    },
    {
        "label": "TestTableViewsController",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_table_views",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_table_views",
        "peekOfCode": "class TestTableViewsController:\n    \"\"\"Test cases for TableViewsController class.\"\"\"\n    @pytest.fixture\n    def controller(self) -> TableViewsController:\n        \"\"\"Create a TableViewsController instance.\"\"\"\n        return TableViewsController()\n    @pytest.fixture\n    def sample_daily_data(self) -> List[Dict[str, Any]]:\n        \"\"\"Create sample daily aggregated data.\"\"\"\n        return [",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_table_views",
        "documentation": {}
    },
    {
        "label": "TestTimeFormatDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "peekOfCode": "class TestTimeFormatDetector:\n    \"\"\"Test cases for TimeFormatDetector class.\"\"\"\n    def test_detect_from_cli_12h(self) -> None:\n        \"\"\"Test CLI detection for 12h format.\"\"\"\n        args = Mock()\n        args.time_format = \"12h\"\n        result = TimeFormatDetector.detect_from_cli(args)\n        assert result is True\n    def test_detect_from_cli_24h(self) -> None:\n        \"\"\"Test CLI detection for 24h format.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "documentation": {}
    },
    {
        "label": "TestSystemTimeDetector",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "peekOfCode": "class TestSystemTimeDetector:\n    \"\"\"Test cases for SystemTimeDetector class.\"\"\"\n    @patch(\"os.environ.get\")\n    @patch(\"os.path.exists\")\n    @patch(\"platform.system\")\n    @patch(\"builtins.open\", create=True)\n    def test_get_timezone_linux_timezone_file(\n        self, mock_open: Mock, mock_system: Mock, mock_exists: Mock, mock_env: Mock\n    ) -> None:\n        \"\"\"Test Linux timezone detection via /etc/timezone file.\"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "documentation": {}
    },
    {
        "label": "TestTimezoneHandler",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "peekOfCode": "class TestTimezoneHandler:\n    \"\"\"Test cases for TimezoneHandler class.\"\"\"\n    def test_init_default(self) -> None:\n        \"\"\"Test TimezoneHandler initialization with default timezone.\"\"\"\n        handler = TimezoneHandler()\n        assert handler.default_tz == pytz.UTC\n    def test_init_custom_valid(self) -> None:\n        \"\"\"Test TimezoneHandler initialization with valid custom timezone.\"\"\"\n        handler = TimezoneHandler(\"America/New_York\")\n        assert handler.default_tz.zone == \"America/New_York\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "documentation": {}
    },
    {
        "label": "TestPublicAPI",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "peekOfCode": "class TestPublicAPI:\n    \"\"\"Test cases for public API functions.\"\"\"\n    def test_get_time_format_preference(self) -> None:\n        \"\"\"Test get_time_format_preference function.\"\"\"\n        args = Mock()\n        args.time_format = \"12h\"\n        with patch.object(\n            TimeFormatDetector, \"get_preference\", return_value=True\n        ) as mock_get:\n            result = get_time_format_preference(args)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "documentation": {}
    },
    {
        "label": "TestFormattingUtilities",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "peekOfCode": "class TestFormattingUtilities:\n    \"\"\"Test cases for formatting utility functions.\"\"\"\n    def test_format_time_minutes_only(self) -> None:\n        \"\"\"Test format_time with minutes only.\"\"\"\n        assert format_time(30) == \"30m\"\n        assert format_time(59) == \"59m\"\n    def test_format_time_hours_only(self) -> None:\n        \"\"\"Test format_time with exact hours.\"\"\"\n        assert format_time(60) == \"1h\"\n        assert format_time(120) == \"2h\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_time_utils",
        "documentation": {}
    },
    {
        "label": "TestTimezoneHandler",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "peekOfCode": "class TestTimezoneHandler:\n    \"\"\"Test suite for TimezoneHandler class.\"\"\"\n    @pytest.fixture\n    def handler(self) -> TimezoneHandler:\n        \"\"\"Create a TimezoneHandler with default settings.\"\"\"\n        return TimezoneHandler()\n    @pytest.fixture\n    def custom_handler(self) -> TimezoneHandler:\n        \"\"\"Create a TimezoneHandler with custom timezone.\"\"\"\n        return TimezoneHandler(default_tz=\"America/New_York\")",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "documentation": {}
    },
    {
        "label": "TestTimezonePreferenceDetection",
        "kind": 6,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "peekOfCode": "class TestTimezonePreferenceDetection:\n    \"\"\"Test suite for timezone preference detection functions.\"\"\"\n    def test_detect_timezone_time_preference_delegation(self) -> None:\n        \"\"\"Test that _detect_timezone_time_preference delegates correctly.\"\"\"\n        # This function delegates to get_time_format_preference\n        with patch(\n            \"claude_monitor.utils.time_utils.get_time_format_preference\",\n            return_value=True,\n        ):\n            result = _detect_timezone_time_preference()",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_timezone",
        "documentation": {}
    },
    {
        "label": "test_get_version_from_metadata",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_get_version_from_metadata() -> None:\n    \"\"\"Test getting version from package metadata.\"\"\"\n    with patch(\"importlib.metadata.version\") as mock_version:\n        mock_version.return_value = \"3.0.0\"\n        version = get_version()\n        assert version == \"3.0.0\"\n        mock_version.assert_called_once_with(\"claude-monitor\")\ndef test_get_version_fallback_to_pyproject() -> None:\n    \"\"\"Test fallback to pyproject.toml when package not installed.\"\"\"\n    mock_toml_content = \"\"\"",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_get_version_fallback_to_pyproject",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_get_version_fallback_to_pyproject() -> None:\n    \"\"\"Test fallback to pyproject.toml when package not installed.\"\"\"\n    mock_toml_content = \"\"\"\n[project]\nname = \"claude-monitor\"\nversion = \"3.0.0\"\n\"\"\"\n    with patch(\"importlib.metadata.version\") as mock_version:\n        mock_version.side_effect = ImportError(\"Package not found\")\n        with (",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_get_version_fallback_unknown",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_get_version_fallback_unknown() -> None:\n    \"\"\"Test fallback to 'unknown' when everything fails.\"\"\"\n    with patch(\"importlib.metadata.version\") as mock_version:\n        mock_version.side_effect = ImportError(\"Package not found\")\n        with patch(\"pathlib.Path.exists\", return_value=False):\n            version = _get_version_from_pyproject()\n            assert version == \"unknown\"\ndef test_version_import_from_main_module() -> None:\n    \"\"\"Test that version can be imported from main module.\"\"\"\n    from claude_monitor import __version__",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_version_import_from_main_module",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_version_import_from_main_module() -> None:\n    \"\"\"Test that version can be imported from main module.\"\"\"\n    from claude_monitor import __version__\n    assert isinstance(__version__, str)\n    assert len(__version__) > 0\ndef test_version_format() -> None:\n    \"\"\"Test that version follows expected format.\"\"\"\n    from claude_monitor import __version__\n    # Should be semantic version format (X.Y.Z) or include \"unknown\"\n    if __version__ != \"unknown\":",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_version_format",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_version_format() -> None:\n    \"\"\"Test that version follows expected format.\"\"\"\n    from claude_monitor import __version__\n    # Should be semantic version format (X.Y.Z) or include \"unknown\"\n    if __version__ != \"unknown\":\n        parts = __version__.split(\".\")\n        assert len(parts) >= 2, (\n            f\"Version should have at least 2 parts, got: {__version__}\"\n        )\n        # First part should be numeric",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_version_consistency",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_version_consistency() -> None:\n    \"\"\"Test that version is consistent across imports.\"\"\"\n    from claude_monitor import __version__ as version1\n    from claude_monitor._version import __version__ as version2\n    assert version1 == version2, \"Version should be consistent across imports\"\n@pytest.mark.integration\ndef test_version_matches_pyproject() -> None:\n    \"\"\"Integration test: verify version matches pyproject.toml.\"\"\"\n    from pathlib import Path\n    # Read version from pyproject.toml",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "test_version_matches_pyproject",
        "kind": 2,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "def test_version_matches_pyproject() -> None:\n    \"\"\"Integration test: verify version matches pyproject.toml.\"\"\"\n    from pathlib import Path\n    # Read version from pyproject.toml\n    pyproject_path = Path(__file__).parent.parent.parent / \"pyproject.toml\"\n    if pyproject_path.exists():\n        try:\n            import tomllib\n            with open(pyproject_path, \"rb\") as f:\n                data = tomllib.load(f)",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "name = \"claude-monitor\"\nversion = \"3.0.0\"\n\"\"\"\n    with patch(\"importlib.metadata.version\") as mock_version:\n        mock_version.side_effect = ImportError(\"Package not found\")\n        with (\n            patch(\"pathlib.Path.exists\", return_value=True),\n            patch(\"builtins.open\", mock_open(read_data=mock_toml_content.encode())),\n        ):\n            try:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "description": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "peekOfCode": "version = \"3.0.0\"\n\"\"\"\n    with patch(\"importlib.metadata.version\") as mock_version:\n        mock_version.side_effect = ImportError(\"Package not found\")\n        with (\n            patch(\"pathlib.Path.exists\", return_value=True),\n            patch(\"builtins.open\", mock_open(read_data=mock_toml_content.encode())),\n        ):\n            try:\n                with patch(\"tomllib.load\") as mock_load:",
        "detail": "zzzrefs.Claude-Code-Usage-Monitor.src.tests.test_version",
        "documentation": {}
    }
]